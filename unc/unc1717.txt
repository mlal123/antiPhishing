DQpJbiByZWNlbnQgbW9udGhzIHRoZSBVTkMtQ2hhcGVsIEhpbGwgY2FtcHVzIGhhcyBi
ZWVuIHRoZSB0YXJnZXQgb2YgYW4gZW1haWwgcGhpc2hpbmcgc2NhbSBpbiB3aGljaCBv
ZmZlbmRlcnMgc3Bvb2YgY29tbXVuaWNhdGlvbnMgZnJvbSBzZW5pb3IgYWRtaW5pc3Ry
YXRpdmUgc3RhZmYgaW4gYW4gYXR0ZW1wdCB0byBvYnRhaW4gdW5hdXRob3JpemVkIHdp
cmUgdHJhbnNmZXJzIG9mIGZ1bmRzLiBUaGVzZSBzY2FtIGVtYWlscyBhcmUgcGFydCBv
ZiBhbiBvcmdhbml6ZWQgZWZmb3J0IG9mdGVuIHJlZmVycmVkIHRvIGFzIGEgQ0VPIGZy
YXVkIHNjaGVtZSwgd2hpY2ggaGFzIGNvc3QgbW9yZSB0aGFuIDcsMDAwIFUuUy4gY29t
cGFuaWVzIG5lYXJseSAkNzUwIG1pbGxpb24gb3ZlciB0aGUgbGFzdCB0d28geWVhcnMs
IGFjY29yZGluZyB0byB0aGUgRkJJLsKgDQoNCkhvdyBwaGlzaGluZyBoYXBwZW5zDQoN
ClVubGlrZSB0cmFkaXRpb25hbCBwaGlzaGluZyBzY2Ftcywgc3Bvb2ZlZCBlbWFpbHMg
dXNlZCBpbiBDRU8gZnJhdWQgc2NoZW1lcyBhcmUgdW5saWtlbHkgdG8gc2V0IG9mZiBz
cGFtIHRyYXBzLCBiZWNhdXNlIHRoZXNlIGFyZSB0YXJnZXRlZCBwaGlzaGluZyBzY2Ft
cyBhbHNvIGtub3duIGFzIOKAnHNwZWFyIHBoaXNoaW5n4oCdIHRoYXQgYXJlIG5vdCBt
YXNzIGUtbWFpbGVkLiBJbiBzdWNoIHNjYW1zLCB0aGUgb2ZmZW5kZXJzIGVpdGhlciBz
ZW5kIGVtYWlsIGZyb20gYSBsb29rLWFsaWtlIGRvbWFpbiBuYW1lIG9yIGdhaW4gYWNj
ZXNzIHRvIGEgc2VuaW9yIGFkbWluaXN0cmF0b3LigJlzIGluYm94LiBJbiBib3RoIGNh
c2VzLCB0aGUgZnJhdWRzdGVycyB3aWxsIGZvcmdlIHRoZSBzZW5kZXLigJlzIGVtYWls
IGFkZHJlc3MgZGlzcGxheWVkIHRvIHRoZSByZWNpcGllbnQsIHNvIHRoYXQgdGhlIGVt
YWlsIGFwcGVhcnMgdG8gYmUgY29taW5nIGZyb20gYSBsZWdpdGltYXRlIFVOQyBlbWFp
bCBhZGRyZXNzLiBIb3dldmVyLCB0aGUg4oCccmVwbHktdG/igJ0gYWRkcmVzcyBpcyB0
aGUgc3Bvb2ZlZCBkb21haW4sIGVuc3VyaW5nIHRoYXQgYW55IHJlcGxpZXMgYXJlIHNl
bnQgdG8gdGhlIGZyYXVkc3Rlci4NCg0KU3RhZmYgc2hvdWxkIGFsd2F5cyB2ZXJpZnkg
ZW1haWwgcmVxdWVzdHMgZm9yIGZ1bmQgdHJhbnNmZXJzIHdpdGggYSB0ZWxlcGhvbmUg
Y2FsbCB0byB0aGUgcHVycG9ydGVkIHNlbmRlciBvciB0byBhIHN1cGVydmlzb3IuIFVO
QyBoYXMgbWFueSBzZWN1cml0eSB0b29scyBpbiBwbGFjZSB0byBoZWxwIGRldGVjdCwg
YmxvY2sgYW5kIGNvbW11bmljYXRlIGtub3duIHBoaXNoaW5nIG9yIHNjYW0gYXR0ZW1w
dHMsIGJ1dCB3ZSBhbHNvIHJlbHkgb24gdGhlIFVOQyBjb21tdW5pdHkgdG8gYmUgY2F1
dGlvdXMgd2hlbiBvcGVuaW5nIG9yIHJlcGx5aW5nIHRvIGVtYWlsIG1lc3NhZ2VzLg0K
DQpXZSBoYXZlIGFsc28gc2VlbiBhbiBpbmNyZWFzZSBpbiB0aGUgbnVtYmVyIG9mIOKA
nHRyYWRpdGlvbmFs4oCdIHBoaXNoaW5nIGF0dGVtcHRzIGhpdHRpbmcgdGhlIGluYm94
ZXMgb2Ygb3VyIGZhY3VsdHksIHN0YWZmIGFuZCBzdHVkZW50cy4gV2UgYXJlIHNlbmRp
bmcgdGhpcyBub3RlIHRvIGhlbHAgeW91IGJldHRlciB1bmRlcnN0YW5kIHdoYXQgcGhp
c2hpbmcgaXMgYW5kIHdoYXQgcmVzb3VyY2VzIGV4aXN0IHRvIHByZXZlbnQgYmVjb21p
bmcgYSB2aWN0aW0gb2YgYSBwaGlzaGluZyBhdHRlbXB0Lg0KDQpIb3cgdG8gcmVwb3J0
IGFuZCB2aWV3IHJlcG9ydGVkIHBoaXNoIGF0dGVtcHRzDQoNCklUUyBoYXMgY3JlYXRl
ZCBhIHdlYnNpdGUgZm9yIHlvdSB0byB2aWV3IGNvbmZpcm1lZCBwaGlzaGluZyBhdHRl
bXB0cyB0byBjYW1wdXM6IGh0dHBzOi8vaXRzLnVuYy5lZHUvcGhpc2gtYWxlcnRzLy4g
V2UgZW5jb3VyYWdlIHlvdSB0byBib29rbWFyayB0aGlzIHNpdGUgZm9yIGZ1dHVyZSBy
ZWZlcmVuY2UuIElmIHlvdSByZWNlaXZlIGFuIGVtYWlsIHRoYXQgaXMgbm90IGN1cnJl
bnRseSBsaXN0ZWQgb24gdGhhdCBzaXRlLCB3ZSBhc2sgdGhhdCB5b3UgZm9yd2FyZCBp
dCB0byBwaGlzaEB1bmMuZWR1LiBVbmRlciBubyBjaXJjdW1zdGFuY2VzIHNob3VsZCB5
b3UgY2xpY2sgb24gbGlua3MgcHJvdmlkZWQgaW4gdGhlc2UgcGhpc2hpbmcgZW1haWxz
Lg0KDQpBZGRpdGlvbmFsbHksIGEgSGVscCBkb2N1bWVudCBpcyBhdmFpbGFibGUgdG8g
aGVscCB5b3UgbGVhcm4gbW9yZSBhYm91dCBwaGlzaDogaHR0cDovL2hlbHAudW5jLmVk
dS9oZWxwL2NhdWdodC1hLXBoaXNoLy5XZSBhcHByZWNpYXRlIHlvdXIgYXNzaXN0YW5j
ZSBpbiBoZWxwaW5nIHRvIGtlZXAgb3VyIFVuaXZlcnNpdHnigJlzIGluZm9ybWF0aW9u
IGFuZCByZXNvdXJjZXMgc2FmZSBmcm9tIHNjYW1tZXJzLg0KDQpSZWdhcmRzLA0KDQpD
aHJpcyBLaWVsdCzCoFZpY2UgQ2hhbmNlbGxvciBmb3IgSW5mb3JtYXRpb24gVGVjaG5v
bG9neQ0KDQpNYXR0aGV3IEZhamFjayzCoFZpY2UgQ2hhbmNlbGxvciBmb3IgRmluYW5j
ZSBhbmQgQWRtaW5pc3RyYXRpb24NCg0KVGhpcyBtZXNzYWdlIGlzIHNwb25zb3JlZCBi
eTogSVRTIGFuZCBGaW5hbmNlICYgQWRtaW5pc3RyYXRpb24=