RGVhciBDb2xsZWFndWVzLA0KDQpXZSBoYXZlIGxhdW5jaGVkIGEgc2VhcmNoIGZvciB0
aGUgdW5pdmVyc2l0eeKAmXMgbmV3IGNoaWVmIGludGVybmF0aW9uYWwgb2ZmaWNlciBh
bmQgdmljZSBwcm92b3N0IChDSU8pLsKgIFRoZSBDSU8gcmVzcG9uc2liaWxpdGllcyBo
YXZlIGJlZW4gdmVyeSBhYmx5IGNhcnJpZWQgb3V0IGJ5IEV4ZWN1dGl2ZSBWaWNlIFBy
b3Zvc3QgYW5kIENoaWVmIEludGVybmF0aW9uYWwgT2ZmaWNlciBSb24gU3RyYXVzcywg
YnV0IHRoZSByZXNwb25zaWJpbGl0aWVzIG9mIHRoZSByb2xlIG5vdyByZXF1aXJlIGEg
ZnVsbC10aW1lIGNvbW1pdG1lbnQuwqAgSW5mb3JtYXRpb24gYWJvdXQgdGhlIHBvc2l0
aW9uIGFuZCB0aGUgbWFueSBhY3Rpdml0aWVzIHRoYXQgYXJlIHBhcnQgb2YgVU5DIEds
b2JhbCBjYW4gYmUgZm91bmQgYXQgaHR0cDovL3Byb3Zvc3QudW5jLmVkdS9DSU9zZWFy
Y2guwqDCoA0KDQpBcyB0aGUgc2VhcmNoIGJlZ2lucywgd2UgYXJlIGVhZ2VyIGZvciB5
b3VyIHN1Z2dlc3Rpb25zIG9mIHBvdGVudGlhbCBjYW5kaWRhdGVzLCBlaXRoZXIgd2l0
aGluIG9yIGJleW9uZCBVTkMuwqAgUGxlYXNlIHNlbmQgdGhlbSB0byBvdXIgY29uc3Vs
dGFudHMgYXQgVU5DQ0lPQHdpdHRraWVmZmVyLmNvbS7CoCBUaGV5IHdpbGwgZm9sbG93
IHVwIG9uIGFsbCB5b3VyIG5vbWluYXRpb25zLCB3aGljaCBzaG91bGQgaW5jbHVkZSBh
dCBsZWFzdCBhIG5hbWUgYW5kIGVtYWlsIGFkZHJlc3MsIGJ1dCB0aGV5IHdpbGwgYWxz
byBhcHByZWNpYXRlIHJlY2VpdmluZyBhbnkgb2JzZXJ2YXRpb25zIHlvdSBtaWdodCB3
YW50IHRvIG1ha2UgYWJvdXQgeW91ciBub21pbmVlcy4NCg0KVGhhbmsgeW91IGluIGFk
dmFuY2UgZm9yIHlvdXIgaW52b2x2ZW1lbnQuIFdlIGFyZSBlYWdlciB0byBoYXZlIGEg
cm9idXN0IHBvb2wgb2YgaGlnaGx5IHNraWxsZWQgY2FuZGlkYXRlcyBmb3IgdGhpcyBp
bXBvcnRhbnQgcG9zaXRpb24sIGFuZCB5b3VyIGFzc2lzdGFuY2Ugd2lsbCBiZSBleHRy
ZW1lbHkgdmFsdWFibGUgaW4gYWNoaWV2aW5nIHRoYXQgZ29hbC4NCg0KU2luY2VyZWx5
LA0KDQpKYW1lcyBXLiBEZWFuLCBKci4NCg0KRXhlY3V0aXZlIFZpY2UgQ2hhbmNlbGxv
ciBhbmQgUHJvdm9zdA0KDQpUaGlzIG1lc3NhZ2UgaXMgc3BvbnNvcmVkIGJ5OiBPZmZp
Y2Ugb2YgdGhlIEV4ZWN1dGl2ZSBWaWNlIENoYW5jZWxsb3IgYW5kIFByb3Zvc3Q=