VG86wqDCoMKgwqDCoMKgwqDCoMKgwqBVTkMtQ2hhcGVsIEhpbGwgQ29tbXVuaXR5DQoN
CkZyb206wqDCoMKgwqDCoCBTZWFyY2ggQ29tbWl0dGVlLCBEaXJlY3RvciwgQ2Fyb2xp
bmEgV29tZW7igJlzIENlbnRlcg0KDQpSZTrCoMKgwqDCoMKgwqDCoMKgwqAgRGlyZWN0
b3IsIENhcm9saW5hIFdvbWVu4oCZcyBDZW50ZXIgT3BlbiBGb3J1bXMNCg0KwqANCg0K
VGhlIFNlYXJjaCBDb21taXR0ZWUgaW52aXRlcyB5b3UgdG8gYXR0ZW5kIHVwY29taW5n
IGZvcnVtcyB3aXRoIGNhbmRpZGF0ZXMgZm9yIHRoZSBwb3NpdGlvbiBvZiBEaXJlY3Rv
ciwgQ2Fyb2xpbmEgV29tZW7igJlzIENlbnRlciBhbmQgc2hhcmUgeW91ciBmZWVkYmFj
ay4gVGhlc2UgZm9ydW1zIGFyZSBkZXNpZ25lZCB0byBoZWxwIGludHJvZHVjZSBzdHVk
ZW50cywgZmFjdWx0eSwgYW5kIHN0YWZmIHRvIHRoZSBjYW5kaWRhdGVzIGFuZCB0aGVp
ciBpZGVhcyBmb3Igd2F5cyB0byBlbmhhbmNlIHRoZSBXb21lbuKAmXMgQ2VudGVyIGFu
ZCB0aGUgVW5pdmVyc2l0eSBvZiBOb3J0aCBDYXJvbGluYSBhdCBDaGFwZWwgSGlsbC4N
Cg0KVGhlIERpcmVjdG9yIHdpbGwgbGVhZCB0aGUgQ2VudGVyIGluIGZ1bGZpbGxpbmcg
aXRzIG1pc3Npb27igJR0byBjcmVhdGUgYW4gaW5jbHVzaXZlIGVkdWNhdGlvbiBhbmQg
d29yayBlbnZpcm9ubWVudCB3aGVyZSBnZW5kZXIgaXMgbm90IGEgYmFycmllciB0byBz
dWNjZXNzLCBkaWZmZXJlbmNlIGFuZCBkaXZlcnNpdHkgYXJlIGNlbGVicmF0ZWQsIGFu
ZCBldmVyeW9uZSBpcyBzYWZlIHRvIGxpdmUsIGxlYXJuLCB0ZWFjaCwgYW5kIHdvcmsg
d2l0aG91dCB0aHJlYXQgb2YgaGFybSBvciB1bmVxdWFsIHRyZWF0bWVudOKAlHRvIGVu
c3VyZSB0aGUgb25nb2luZyBncm93dGggYW5kIHN1Y2Nlc3Mgb2YgdGhlIHBlb3BsZSB3
aG8gbWFrZSB1cCB0aGUgQ2hhcGVsIEhpbGwgY29tbXVuaXR5LsKgDQoNClRoZSBDZW50
ZXIsIGVzdGFibGlzaGVkIGluIDE5OTcsIHJlcHJlc2VudHMgd29tZW7igJlzIGludGVy
ZXN0cyBvbiBhIGNvbXByZWhlbnNpdmUgcmFuZ2Ugb2YgaXNzdWVzLCBpbmNsdWRpbmcg
cHJvZmVzc2lvbmFsIGRldmVsb3BtZW50LCBoZWFsdGgsIGdlbmRlciB2aW9sZW5jZSwg
Y2hpbGRjYXJlLCBwYXkgZXF1aXR5LCB0aGUgY2FtcHVzIGNsaW1hdGUgZm9yIHdvbWVu
LCBhbmQgdGhlIGludGVyc2VjdGlvbiBvZiBnZW5kZXIgd2l0aCBhIHJhbmdlIG9mIGlk
ZW50aXRpZXMuwqAgVGhlIHdvcmsgb2YgdGhlIENlbnRlciBmYWxscyBpbnRvIHR3byBi
cm9hZCBjYXRlZ29yaWVzLCAoMSkgcHJvZ3JhbXMgYW5kIGluaXRpYXRpdmVzIHRvIGJl
bmVmaXQgZmFjdWx0eSwgc3RhZmYsIGFuZCBzdHVkZW50cywgYW5kICgyKSBjb25maWRl
bnRpYWwgc2VydmljZXMgZm9yIHBlb3BsZSBleHBlcmllbmNpbmcgaW50ZXJwZXJzb25h
bCB2aW9sZW5jZS4NCg0KVGhlIERpcmVjdG9yIG9mIHRoZSBDYXJvbGluYSBXb21lbuKA
mXMgQ2VudGVyIHdvcmtzIGNvbGxhYm9yYXRpdmVseSBhbmQgc3RyYXRlZ2ljYWxseSB0
byBsZWFkIHRoZSBVbml2ZXJzaXR5IGNvbW11bml0eSB0b3dhcmQgaW5jcmVhc2VkIGdl
bmRlciBlcXVpdHksIHdpdGggYSBzdHJvbmcgZW1waGFzaXMgb24gZGl2ZXJzaXR5IGFu
ZCBpbmNsdXNpb24uwqAgVGhlIERpcmVjdG9yIGhhcyBvdmVyYWxsIHJlc3BvbnNpYmls
aXR5IGZvciB0aGUgYWN0aXZpdGllcywgcHJvZ3JhbXMsIGFuZCBvcGVyYXRpb25zIG9m
IHRoZSBDZW50ZXIuwqANCg0KQ2FuZGlkYXRlIGZvcnVtcyBoYXZlIGJlZW4gc2NoZWR1
bGVkIGF0IHRoZSBXaWxzb24gTGlicmFyeSBQbGVhc2FudHMgUm9vbSBhbmQgdGhlIFRv
eSBMb3VuZ2UgYXMgZm9sbG93c8KgKGNsaWNrIG9uIHRoZSBjYW5kaWRhdGVz4oCZIG5h
bWVzIHRvIHZpZXcgdGhlaXIgQ1ZzKToNCg0KR2xvcmlhIFRob21hcw0KDQpBcHJpbCAy
NSzCoDI6MzAg4oCTIDM6MTVwbQ0KV2lsc29uIExpYnJhcnkgUGxlYXNhbnRzIEZhbWls
eSBBc3NlbWJseSBSb29tDQpNZWxpc3NhIE9vdGVuDQoNCkFwcmlsIDI2LMKgMjowMCDi
gJMgMjo0NXBtDQpXaWxzb24gTGlicmFyeSBQbGVhc2FudHMgRmFtaWx5IEFzc2VtYmx5
IFJvb20NCkJldGggUG9zbmVyDQoNCkFwcmlsIDI4LMKgMzozMCDigJMgNDoxNXBtDQpE
ZXkgSGFsbCwgVG95IExvdW5nZQ0KwqANCg0KSW5xdWlyaWVzIG1heSBiZSBhZGRyZXNz
ZWQgdG8gTXMuIENoYXJsw6kgTGFNb25pY2EsIENoYWlyLCBDYXJvbGluYSBXb21lbuKA
mXMgQ2VudGVyIFNlYXJjaCBDb21taXR0ZWUgYXQgbGFtb25pY2FAZW1haWwudW5jLmVk
dSBvciA5MTktODQzLTk0MDguDQoNClRoaXMgbWVzc2FnZSBpcyBzcG9uc29yZWQgYnk6
IE9mZmljZSBvZiB0aGUgRXhlY3V0aXZlIFZpY2UgQ2hhbmNlbGxvciBhbmQgUHJvdm9z
dA==