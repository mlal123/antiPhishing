DQpUaGUgQ2Fyb2xpbmEgQ2VudGVyIGZvciBQdWJsaWMgU2VydmljZSBvdmVyc2VlcyB0
aGUgYW5udWFsIHNlbGVjdGlvbiBvZiB0aHJlZSBjYW1wdXMtd2lkZSBhd2FyZHMgaG9u
b3JpbmcgaW5kaXZpZHVhbCBzdHVkZW50cywgZmFjdWx0eSwgc3RhZmYgYW5kIFVuaXZl
cnNpdHkgdW5pdHMgZm9yIGV4ZW1wbGFyeSBwdWJsaWMgc2VydmljZSBhbmQgZW5nYWdl
ZCBzY2hvbGFyc2hpcC4gTm9taW5hdGlvbnMgYXJlIGJlaW5nIGFjY2VwdGVkLCBhbmQg
YXdhcmQgcmVjaXBpZW50cyB3aWxsIGJlIGhvbm9yZWQgYXQgYSBzcHJpbmcgY2VsZWJy
YXRpb24gd2hlcmUgdGhleSByZWNlaXZlIGEgbW9uZXRhcnkgYXdhcmQgYW5kIGZyYW1l
ZCBjZXJ0aWZpY2F0ZS4NCg0KVGhlwqBSb2JlcnQgRS4gQnJ5YW7CoGFuZMKgT2ZmaWNl
IG9mIHRoZSBQcm92b3N0IEF3YXJkcyByZXF1aXJlIGEgYnJpZWYgKHR3by1wYXJhZ3Jh
cGgpIG5vbWluYXRpb24gc3VibWl0dGVkIG9ubGluZSBieSAxMTo1OSBwLm0uIEZlYi4g
NywgMjAxOC4gU2VsZWN0ZWQgbm9taW5lZXMgd2lsbCBiZSBpbnZpdGVkIHRvIGNvbXBs
ZXRlIGEgbW9yZSBkZXRhaWxlZCBzdWJtaXNzaW9uIGFib3V0IHRoZWlyIHdvcmsgYnkg
RmViLiAyOCwgMjAxOC4gRmluYWwgc2VsZWN0aW9uIHdpbGwgYmUgYmFzZWQgb24gYm90
aCB0aGUgaW5pdGlhbCBub21pbmF0aW9uIGFuZCB0aGUgbm9taW5lZSBhcHBsaWNhdGlv
bi4gRnVsbCBub21pbmF0aW9ucyBmb3IgdGhlIE5lZCBCcm9va3MgQXdhcmQgYXJlIGR1
ZSBieSAxMTo1OSBwLm0uIEZlYi4gNywgMjAxOC4gQXBwbHkgb25saW5lIGZvciBhbGwg
YXdhcmRzIGF0IENhcm9saW5hwqBDZW50ZXIgZm9yIFB1YmxpYyBTZXJ2aWNlIEFwcGxp
Y2F0aW9uIGFuZCBOb21pbmF0aW9uIFBvcnRhbC7CoEZvciBkZXRhaWxzLCB2aXNpdCBB
d2FyZHMgYW5kIEZlbGxvd3NoaXBzLg0KDQpSb2JlcnQgRS4gQnJ5YW4gUHVibGljIFNl
cnZpY2UgQXdhcmQNCg0KRml2ZSBCcnlhbiBBd2FyZHMgd2lsbCBiZSBnaXZlbiBmb3Ig
YSBzcGVjaWZpYyBlZmZvcnQgKHJhdGhlciB0aGFuIGFuIG92ZXJhbGwgcmVjb3JkKSBl
eGVtcGxpZnlpbmcgb3V0c3RhbmRpbmcgZW5nYWdlbWVudCBhbmQgc2VydmljZSB0byBO
b3J0aCBDYXJvbGluYSB0aGF0IGlzIGNoYXJhY3Rlcml6ZWQgYnk6DQoNCndvcmtpbmcg
aW4gcGFydG5lcnNoaXAgd2l0aCBjb21tdW5pdHkgbWVtYmVycywNCmluc3BpcmluZyBh
bmQgaW52b2x2aW5nIG90aGVycywgYW5kL29yIGhlbHBpbmcgb3RoZXJzIHRvIHNlcnZl
LA0KcmVzcG9uZGluZyB0byBhIHByYWN0aWNhbCBwcm9ibGVtLCBpc3N1ZSBvciBjb25j
ZXJuIG9mIHRoZSBzdGF0ZSwgYW5kDQp3b3JraW5nIHRvIGFzc3VyZSB0aGUgaW1wYWN0
IGluwqB0aGUgY29tbXVuaXR5IGlzIGxhc3RpbmcuwqANCkJyeWFuIGF3YXJkcyB3aWxs
IGJlIGdpdmVuIHRvIHJlY29nbml6ZSBhbiBvdXRzdGFuZGluZzoNCg0KdW5kZXJncmFk
dWF0ZSBzdHVkZW50LA0KZ3JhZHVhdGUgc3R1ZGVudCwNCmZhY3VsdHkgbWVtYmVyLA0K
c3RhZmYgbWVtYmVyLCBhbmQNCm9mZmljaWFsbHkgcmVjb2duaXplZCBzdHVkZW50IG9y
Z2FuaXphdGlvbi4NCkZvciBtb3JlIGluZm9ybWF0aW9uLCB2aXNpdCBSb2JlcnTCoEUu
IEJyeWFuIEF3YXJkcy7CoA0KDQpPZmZpY2Ugb2YgdGhlIFByb3Zvc3QgRW5nYWdlZCBT
Y2hvbGFyc2hpcCBBd2FyZA0KDQpUaGUgT2ZmaWNlIG9mIHRoZSBQcm92b3N0IEVuZ2Fn
ZWQgU2Nob2xhcnNoaXAgQXdhcmQgd2lsbCBiZSBnaXZlbiB0byBmYWN1bHR5IG1lbWJl
cnMgb3IgdW5pdmVyc2l0eSB1bml0cyBmb3IgZXhlbXBsYXJ5IGVuZ2FnZWQgc2Nob2xh
cnNoaXAgaW4gc2VydmljZSB0byBOb3J0aCBDYXJvbGluYS4gVGhlIHNlcnZpY2Ugc2hv
dWxkIGJlIGFuIGV4YW1wbGUgb2YgZXhjZWxsZW5jZSwgaW5jbHVkaW5nIHJlc3BvbnNp
dmVuZXNzIHRvIGNvbW11bml0eSBjb25jZXJucyBhbmQgc3Ryb25nIGNvbW11bml0eSBw
YXJ0bmVyc2hpcHMuwqANCg0KVGhyZWUgUHJvdm9zdCBhd2FyZHMgd2lsbCBiZSBnaXZl
biwgb25lIGVhY2ggZm9yOg0KDQplbmdhZ2VkIHRlYWNoaW5nLA0KZW5nYWdlZCByZXNl
YXJjaCwgYW5kDQplbmdhZ2VkIHBhcnRuZXJzaGlwLg0KRm9yIG1vcmUgaW5mb3JtYXRp
b24sIHZpc2l0IE9mZmljZSBvZiB0aGUgUHJvdm9zdCBBd2FyZC7CoA0KDQpOZWQgQnJv
b2tzIEF3YXJkIGZvciBQdWJsaWMgU2VydmljZQ0KDQpUaGXCoE5lZCBCcm9va3MgQXdh
cmQgcmVjb2duaXplcyBhIHN0YWZmIG9yIGZhY3VsdHkgbWVtYmVyIHdobyB0aHJvdWdo
b3V0IGhpcy9oZXIgY2FyZWVyIGhhcywgaW4gYSBjb2xsYWJvcmF0aXZlIGFuZCBzdXN0
YWluZWQgbWFubmVyLCBtYWRlIGEgZGlmZmVyZW5jZSBpbiB0aGUgY29tbXVuaXR5LiBG
b3IgbW9yZSBpbmZvcm1hdGlvbiwgdmlzaXTCoE5lZCBCcm9va3MgQXdhcmQuwqANCg0K
Rm9yIHF1ZXN0aW9ucywgY29udGFjdCBjY3BzQHVuYy5lZHUgb3IgY2FsbCA5MTktODQz
LTc1NjguDQoNClRoaXMgbWVzc2FnZSBpcyBzcG9uc29yZWQgYnk6IENhcm9saW5hIENl
bnRlciBmb3IgUHVibGljIFNlcnZpY2U=