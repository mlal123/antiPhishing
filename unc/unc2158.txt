DQpPbiBiZWhhbGYgb2YgZXZlcnlvbmUgaW4gdGhlIENhcm9saW5hIGNvbW11bml0eSwg
SSBrbm93IHRoYXQgeW91IGpvaW4gbWUgaW4gb2ZmZXJpbmcgc3ltcGF0aHkgYW5kIGNv
bmRvbGVuY2VzIGZvciB0aGUgdmljdGltcywgdGhlaXIgZmFtaWxpZXMgYW5kIGV2ZXJ5
b25lIHRvdWNoZWQgYnkgdGhlIHRyYWdpYyBzaG9vdGluZyBhdCBhIG5pZ2h0Y2x1YiBp
biBPcmxhbmRvLCBGbG9yaWRhLCBlYXJseSBTdW5kYXkgbW9ybmluZy4NCg0KT3VyIGNv
bW11bml0eSBpcyBzaG9ja2VkIGFuZCBzYWRkZW5lZCBieSB0aGUgbmV3cyBvZiB0aGlz
IHRlcnJpYmxlIHRyYWdlZHkuIEFzIHdlIGNvbWUgdG8gdGVybXMgd2l0aCBvdXIgb3du
IGZlZWxpbmdzIGFuZCBncmllZiwgaXTigJlzIGltcG9ydGFudCB0aGF0IHdlIG9mZmVy
IG91ciBzdXBwb3J0IGFuZCByZWFjaCBvdXQgd2l0aCBraW5kbmVzcyBhbmQgY29tcGFz
c2lvbiB0byBvdXIgTEdCVFEgY29tbXVuaXR5IGFuZCBldmVyeW9uZSBhZmZlY3RlZCBi
eSB0aGlzIHRlcnJpYmxlIGV2ZW50Lg0KDQpNYW55IG9mIHlvdSBtYXkgYmUgZmVlbGlu
ZyB1bnNldHRsZWQuIEkgd2FudGVkIHRvIGxldCB5b3Uga25vdyB0aGF0IENhcm9saW5h
IGhhcyBjb3Vuc2VsaW5nIHNlcnZpY2VzIGF2YWlsYWJsZSBmb3Igc3R1ZGVudHMsIGZh
Y3VsdHkgYW5kIHN0YWZmLiBEdXJpbmcgcmVndWxhciBidXNpbmVzcyBob3Vycywgc3R1
ZGVudHMgYXJlIGVuY291cmFnZWQgdG8gY2FsbCBDb3Vuc2VsaW5nIGFuZCBQc3ljaG9s
b2dpY2FsIFNlcnZpY2VzIGF0IDkxOS05NjYtMzY1OC4gQWZ0ZXIgaG91cnMsIHN0dWRl
bnRzIG1heSBjYWxsIDkxOS05NjYtMjI4MSBmb3IgaW1tZWRpYXRlIGFzc2lzdGFuY2Uu
IEZhY3VsdHkgYW5kIHN0YWZmIG1heSBjb250YWN0IG91ciBFbXBsb3llZSBBc3Npc3Rh
bmNlIFByb2dyYW0gYXQgODc3LTMxNC01ODQxLCBpZiB5b3Ugd291bGQgbGlrZSBzdXBw
b3J0Lg0KDQpPdXIgaGVhcnRzIGdvIG91dCB0byBldmVyeW9uZSBhZmZlY3RlZCBieSB0
aGlzIGhvcnJpZmljIGV2ZW50Lg0KDQpTaW5jZXJlbHksDQoNCkNhcm9sIEwuIEZvbHQN
CkNoYW5jZWxsb3INCg0KVGhpcyBtZXNzYWdlIGlzIHNwb25zb3JlZCBieTogT2ZmaWNl
IG9mIHRoZSBDaGFuY2VsbG9y