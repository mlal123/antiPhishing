DQpEZWFyIENhcm9saW5hIENvbW11bml0eSwNCg0KVG9kYXksIHdlIHJlY2VpdmVkIHRo
ZSBkZWNpc2lvbiBmcm9tIHRoZSBOQ0FB4oCZcyBDb21taXR0ZWUgb24gSW5mcmFjdGlv
bnMgaW4gb3VyIGNhc2UgcmVzdWx0aW5nIGZyb20gYWNhZGVtaWMgaXJyZWd1bGFyaXRp
ZXMgdGhhdCBlbmRlZCBtb3JlIHRoYW4gc2l4IHllYXJzIGFnby4NCg0KVGhlIGhlYXJp
bmcgcGFuZWwgZm91bmQgbm8gTkNBQSBieWxhdyB2aW9sYXRpb25zIGJ5IHRoZSBVbml2
ZXJzaXR5OyB5b3UgbWF5IHJlYWQgaXRzIGRlY2lzaW9uIGhlcmUuIFdlIGJlbGlldmUg
dGhpcyBpcyB0aGUgY29ycmVjdOKAlGFuZCBmYWly4oCUb3V0Y29tZS4NCg0KSSBhbSBn
cmF0ZWZ1bCB0aGF0IHRoaXMgY2FzZSBoYXMgYmVlbiBkZWNpZGVkIGFuZCB0aGUgVW5p
dmVyc2l0eSBjYW4gY29udGludWUgdG8gZm9jdXMgb24gZGVsaXZlcmluZyB0aGUgYmVz
dCBwb3NzaWJsZSBlZHVjYXRpb24gdG8gb3VyIHN0dWRlbnRzLiBXZSB3aXNoIHRvIHRo
YW5rIHRoZSBOQ0FBIHN0YWZmIGFuZCB0aGUgQ29tbWl0dGVlIG9uIEluZnJhY3Rpb25z
IGZvciB0aGVpciB3b3JrIGFuZCB0aW1lIGR1cmluZyB0aGUgam9pbnQgaW52ZXN0aWdh
dGlvbiBhbmQgaGVhcmluZyBwcm9jZXNzLg0KDQpDYXJvbGluYSBsb25nIGFnbyBwdWJs
aWNseSBhY2NlcHRlZCByZXNwb25zaWJpbGl0eSBmb3Igd2hhdCBoYXBwZW5lZCBpbiB0
aGUgcGFzdC4gT25lIG9mIHRoZSBoaWdoZXN0IHByaW9yaXRpZXMgb2YgdGhpcyBhZG1p
bmlzdHJhdGlvbiBoYXMgYmVlbiB0byByZXNvbHZlIHRoaXMgaXNzdWUgYnkgZm9sbG93
aW5nIHRoZSBmYWN0cywgdW5kZXJzdGFuZGluZyB3aGF0IG9jY3VycmVkLCBhbmQgdGFr
aW5nIGV2ZXJ5IG9wcG9ydHVuaXR5IHRvIG1ha2Ugb3VyIFVuaXZlcnNpdHkgc3Ryb25n
ZXIuIFdlIGhhdmUgYmVlbiBvcGVuIGFuZCB0cmFuc3BhcmVudCBpbiBldmVyeXRoaW5n
IHdlIGhhdmUgZG9uZSwgYXMgZG9jdW1lbnRlZCBvbiBvdXIgQ2Fyb2xpbmEgQ29tbWl0
bWVudCB3ZWJzaXRlLg0KDQpUaGUgcmVzb2x1dGlvbiBvZiB0aGlzIGNhc2UgaXMgcGFy
dCBvZiBhIGNvbXByZWhlbnNpdmUgZWZmb3J0IHdvcmtpbmcgd2l0aCBhZG1pbmlzdHJh
dG9ycywgZmFjdWx0eSBhbmQgc3RhZmYgYWNyb3NzIGNhbXB1cyBhbmQgd2l0aCB0aGUg
U291dGhlcm4gQXNzb2NpYXRpb24gb2YgQ29sbGVnZXMgYW5kIFNjaG9vbHMgQ29tbWlz
c2lvbiBvbiBDb2xsZWdlcywgb3VyIGFjY3JlZGl0aW5nIGFnZW5jeSwgdG8gZnVsbHkg
YWRkcmVzcyB0aGVzZSBpc3N1ZXMuDQoNClN0cm9uZyBjb2xsYWJvcmF0aW9uIHdpdGgg
b3VyIGZhY3VsdHkgd2FzIGNyaXRpY2FsIHRvIGRldmVsb3BpbmcgdGhlIG1vcmUgdGhh
biA3MCBncm91bmRicmVha2luZyByZWZvcm1zIGFuZCBpbml0aWF0aXZlcywgaW5jbHVk
aW5nIGluIHRoZSBhcmVhcyBvZiBhY2FkZW1pYyBhZHZpc2luZyBhbmQgYWNhZGVtaWMg
b3ZlcnNpZ2h0LiBJIGJlbGlldmUgd2UgaGF2ZSBkb25lIGV2ZXJ5dGhpbmcgcG9zc2li
bGUgdG8gY29ycmVjdCBhbmQgbW92ZSBiZXlvbmQgdGhlIHBhc3QgYWNhZGVtaWMgaXJy
ZWd1bGFyaXRpZXMgYW5kIGhhdmUgZXN0YWJsaXNoZWQgdmVyeSByb2J1c3QgcHJvY2Vz
c2VzIHRvIHByZXZlbnQgdGhlbSBmcm9tIHJlY3VycmluZy4gV2UgY29udGludWUgdG8g
ZGV2b3RlIGV4dHJhb3JkaW5hcnkgcmVzb3VyY2VzIHRvIG1vbml0b3JpbmcgYW5kIHJl
ZmluaW5nIHRoZXNlIHJlZm9ybXMgYW5kIGluaXRpYXRpdmVzIHRoYXQgaGF2ZSBhbHJl
YWR5IGhhdmUgaGFkIHN1Y2ggYSBwcm9mb3VuZCBpbXBhY3Qgb24gb3VyIFVuaXZlcnNp
dHkuDQoNCkkgd2FudCB0byB0aGFuayBvdXIgZGVkaWNhdGVkIHN0dWRlbnRzLCBhbmQg
ZXNwZWNpYWxseSBvdXIgc3R1ZGVudC1hdGhsZXRlcywgd2hvIGhhdmUgc2hvd24gc28g
bXVjaCBwYXNzaW9uIGFuZCBkcml2ZSBpbiB0aGUgY2xhc3Nyb29tIGFuZCBpbiBjb21w
ZXRpdGlvbiB3aGlsZSBhbGwgb2YgdGhlc2UgdGhpbmdzIHRoYXQgaGFkIG5vdGhpbmcg
dG8gZG8gd2l0aCB0aGVtIHdlcmUgYWRkcmVzc2VkLiBDYXJvbGluYSBpcyBwcm91ZCBv
ZiB0aGUgYWNjb21wbGlzaG1lbnRzIG9mIG91ciBjb2FjaGVzIGFuZCBmYWN1bHR5IGFu
ZCB0aGVpciBjb21taXRtZW50IHRvIG91ciBzdHVkZW50cyBhbmQgb3VyIGNhbXB1cy4g
V2UgYXJlIHZlcnkgZ3JhdGVmdWwgZm9yIHRoZSBsb3lhbCBzdXBwb3J0IG9mIG91ciBh
bHVtbmkgYW5kIGZyaWVuZHMuDQoNCkNhcm9saW5hIGlzIGluIGEgYmV0dGVyIHBsYWNl
LCBhbmQgd2UgY29udGludWUgdG8gZm9jdXMgb24gZGVzZXJ2aW5nIHlvdXIgdHJ1c3Qg
YW5kIGVuc3VyaW5nIGludGVncml0eSBpbiBldmVyeXRoaW5nIHdlIGRvLiBXZSBhcmUg
YXMgcmVzb2x1dGUgYXMgd2UgaGF2ZSBldmVyIGJlZW4gdG8gb3VyIGNvbW1pdG1lbnQg
dG8gZXhjZWxsZW5jZSwgZ3VpZGVkIGJ5IG91ciBoaXN0b3JpYyBtaXNzaW9uIHRvIHNl
cnZlIHRoZSBwZW9wbGUgaW4gb3VyIHN0YXRlIGFuZCBiZXlvbmQuDQoNClNpbmNlcmVs
eSwNCg0KQ2Fyb2wgTC4gRm9sdA0KQ2hhbmNlbGxvcg0KDQpUaGlzIG1lc3NhZ2UgaXMg
c3BvbnNvcmVkIGJ5OiBPZmZpY2Ugb2YgdGhlIENoYW5jZWxsb3I=