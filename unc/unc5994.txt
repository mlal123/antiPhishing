DQpEZWFyIENhbXB1cyBDb21tdW5pdHk6DQoNCkJlY2F1c2Ugb2Ygc2VyaW91cyBjb25j
ZXJucyBhYm91dCBjYW1wdXMgc2FmZXR5LCBJIGhhdmUgZGVjbGluZWQgYSByZXF1ZXN0
IGZyb20gdGhlIE5hdGlvbmFsIFBvbGljeSBJbnN0aXR1dGUgdG8gcmVudCBzcGFjZSBm
b3IgUmljaGFyZCBTcGVuY2VyIHRvIHNwZWFrIG9uIGNhbXB1cy4NCg0KSSBtYWRlIHRo
aXMgZGVjaXNpb24gYWZ0ZXIgY29uc3VsdGF0aW9uIHdpdGggVU5DIFBvbGljZSBhbmQg
bG9jYWwgYW5kIHN0YXRlIGxhdyBlbmZvcmNlbWVudCBhZ2VuY2llcyB3aG8gaGF2ZSB0
aG9yb3VnaGx5IGFzc2Vzc2VkIHRoZSByaXNrcyBzdWNoIGFuIGV2ZW50IGNvdWxkIGJy
aW5nIHRvIENhcm9saW5hLiBPdXIgYmFzaXMgZm9yIHRoaXMgZGVjaXNpb24gaXMgdGhl
IHNhZmV0eSBhbmQgc2VjdXJpdHkgb2YgdGhlIGNhbXB1cyBjb21tdW5pdHnigJR3ZSBh
cmUgbm90IHdpbGxpbmcgdG8gcmlzayBhbnlvbmXigJlzIHNhZmV0eSBpbiBsaWdodCBv
ZiB0aGVzZSBrbm93biByaXNrcy4NCg0KSSBhbSBkZWVwbHkgc2FkZGVuZWQgYW5kIGRp
c3R1cmJlZCB0aGF0IHRoZSB2aW9sZW50IGFuZCB2aXJ1bGVudCByaGV0b3JpYyBiZWlu
ZyBlc3BvdXNlZCBieSBleHRyZW1pc3QgZ3JvdXBzIGhhcyBqZW9wYXJkaXplZCB0aGUg
YWJpbGl0eSBvZiBjYW1wdXNlcyB0byBwcm9tb3RlIHJvYnVzdCBkaWFsb2d1ZSBhbmQg
ZGViYXRlIGFib3V0IGltcG9ydGFudCBpc3N1ZXMgd2hpbGUgZW5zdXJpbmcgcHVibGlj
IHNhZmV0eS4NCg0KT25lIHdheSB0byBjb3VudGVyIHRoaXMgaXMgdG8gcHJvbW90ZSBh
bmQgZW5jb3VyYWdlIG91ciBjYW1wdXMgY29tbXVuaXR5IHRvIGVuZ2FnZSBpbiBjb25z
dHJ1Y3RpdmUgY29udmVyc2F0aW9uLiBJIGhvcGUgYXMgbWFueSBvZiB5b3UgYXMgcG9z
c2libGUgd2lsbCBoZWxwIGtpY2sgb2ZmIHRoaXMgeWVhcuKAmXMgQ2Fyb2xpbmEgQ29u
dmVyc2F0aW9ucyBvbiBXZWRuZXNkYXksIFNlcHQuIDYsIHdpdGggYSBwcm9ncmFtIGNh
bGxlZCDigJxUaGUgRmlyc3QgQW1lbmRtZW50IGFuZCBGcmVlIFNwZWVjaCBhdCBVTkMu
4oCdIFRoaXMgZGlzY3Vzc2lvbiB3aWxsIGV4cGxvcmUgdG9waWNzIGluY2x1ZGluZyB3
aGF0IHRoZSBGaXJzdCBBbWVuZG1lbnQgcHJvdGVjdHMgYXQgYSBwdWJsaWMgdW5pdmVy
c2l0eS4gTW9yZSBkZXRhaWxzIGFyZSBhdmFpbGFibGUgYXQgaHR0cDovL2RpdmVyc2l0
eS51bmMuZWR1Ly4NCg0KVGhhbmsgeW91IGZvciB5b3VyIGF0dGVudGlvbiB0byB0aGlz
IGltcG9ydGFudCB1cGRhdGUuDQoNClNpbmNlcmVseSwNCg0KQ2Fyb2wgTC4gRm9sdA0K
Q2hhbmNlbGxvcg0KDQrCoA0KDQpUaGlzIG1lc3NhZ2UgaXMgc3BvbnNvcmVkIGJ5OiBP
ZmZpY2Ugb2YgdGhlIENoYW5jZWxsb3I=