VGhlIFNlYXJjaCBDb21taXR0ZWUgaW52aXRlcyB5b3UgdG8gYXR0ZW5kIHVwY29taW5nIGZvcnVt
cyB3aXRoIGNhbmRpZGF0ZXMgZm9yIHRoZSBwb3NpdGlvbiBvZiBEaXJlY3RvciwgQWNrbGFuZCBB
cnQgTXVzZXVtIGFuZCBzaGFyZSB5b3VyIGZlZWRiYWNrLiBUaGVzZSBmb3J1bXMgYXJlIGRlc2ln
bmVkIHRvIGhlbHAgaW50cm9kdWNlIHN0dWRlbnRzLCBmYWN1bHR5LCBzdGFmZiwgYW5kIGZyaWVu
ZHMgb2YgdGhlIE11c2V1bSB0byB0aGUgY2FuZGlkYXRlcyBhbmQgdGhlaXIgaWRlYXMgZm9yIHdh
eXMgdG8gZW5oYW5jZSB0aGUgTXVzZXVtIGFuZCB0aGUgVW5pdmVyc2l0eSBvZiBOb3J0aCBDYXJv
bGluYSBhdCBDaGFwZWwgSGlsbC4NCiANClRoZSBpbmNvbWluZyBEaXJlY3RvciB3aWxsIGV4ZWN1
dGUgbmV3IHN0cmF0ZWdpYyBpbml0aWF0aXZlcyBmb3IgdGhlIG11c2V1bSB0aGF0IHdpbGwgZW5s
aXZlbiB0aGUgY2FtcHVzIGFuZCBjb21tdW5pdHksIGJyaW5nIGFydCB0byB0aGUgY2VudGVyIG9m
IHVuaXZlcnNpdHkgbGlmZSwgYW5kIGV4cGFuZCB0aGUgcmVhY2ggb2YgdGhlIG11c2V1bS4gIFRo
ZSBzcGVjaWZpYyByZXNwb25zaWJpbGl0aWVzIG9mIHRoZSBEaXJlY3RvciBhcmUgdG8gKDEpIHBy
b3ZpZGUgdmlzaW9uIGFuZCBjdXJhdG9yaWFsIGFuZCBzdHJhdGVnaWMgbGVhZGVyc2hpcCwgKDIp
IGVuZ2FnZSBpbiBmdW5kcmFpc2luZyBhbmQgcmVzb3VyY2UgZGV2ZWxvcG1lbnQsICgzKSBjb25k
dWN0IG91dHJlYWNoIGFuZCBwYXJ0bmVyc2hpcCBkZXZlbG9wbWVudCwgYW5kICg0KSBwcm92aWRl
IGV4cGVydCBmaXNjYWwsIGFkbWluaXN0cmF0aXZlLCBhbmQgb3BlcmF0aW9uYWwgb3ZlcnNpZ2h0
LiBUaGUgRGlyZWN0b3Igd2lsbCBiZSB0aGUgbGluayBiZXR3ZWVuIHRoZSBNdXNldW0gYW5kIHRo
ZSBhY2FkZW1pYyBwcm9ncmFtcyBvZiB0aGUgVW5pdmVyc2l0eSBhbmQgd2lsbCBiZSByZXNwb25z
aWJsZSBmb3Igb3V0cmVhY2ggdG8gdGhlIGxvY2FsIGNvbW11bml0eSwgdGhlIHN0YXRlLCBhbmQg
YmV5b25kLg0KIA0KQ2FuZGlkYXRlIGZvcnVtcyBoYXZlIGJlZW4gc2NoZWR1bGVkIGF0IHRoZSBB
Y2tsYW5kIEFydCBNdXNldW0gYXMgZm9sbG93cywgYW5kIGVhY2ggd2lsbCBiZSBmb2xsb3dlZCBi
eSBhIHJlY2VwdGlvbiB0byB3aGljaCBhbGwgYXJlIGludml0ZWQ6IA0KDQpNYXJrIFNsb2FuIOKA
kyBKYW51YXJ5IDEzDQpLYXRpZSBaaWdsYXIg4oCTIEphbnVhcnkgMTkNClJheSBXaWxsaWFtcyDi
gJMgSmFudWFyeSAyNQ0KDQoyOjMwLTM6MzAgLSBPcGVuIEZvcnVtIA0KQWNrbGFuZCwgWWFnZXIg
R2FsbGVyeQ0KDQozOjMwLTQ6MzAg4oCTIFJlY2VwdGlvbiANCkFja2xhbmQsIFlhZ2VyIEdhbGxl
cnkNCg0KDQpUaGlzIG1lc3NhZ2UgaXMgc3BvbnNvcmVkIGJ5OiBPZmZpY2Ugb2YgdGhlIEV4ZWN1
dGl2ZSBWaWNlIENoYW5jZWxsb3IgYW5kIFByb3Zvc3Q=
