wqANCg0KRGVhciBDYW1wdXMgQ29tbXVuaXR5Og0KDQpJIGFtIHNhZGRlbmVkIHRvZGF5
IHRvIHNoYXJlIHRoZSBuZXdzIHRoYXQgb3VyIGNoZXJpc2hlZCBjb2xsZWFndWUgYW5k
IGZyaWVuZCwgRHIuIE9saXZlciBTbWl0aGllcywgaGFzIHBhc3NlZCBhd2F5IGF0IHRo
ZSBhZ2Ugb2YgOTEuIE9saXZlciB3YXMgQ2Fyb2xpbmHigJlzIGZpcnN0IGZ1bGwtdGlt
ZSBmYWN1bHR5IG1lbWJlciB0byBiZSBhd2FyZGVkIGEgTm9iZWwgUHJpemUgKDIwMDcp
LiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaGlzIGdyb3VuZGJyZWFraW5nIHdvcmsg
YW5kIGFtYXppbmcgc2NpZW50aWZpYyBkaXNjb3ZlcmllcyB0aGF0IG9wZW5lZCBuZXcg
ZG9vcnMgdG8gdW5kZXJzdGFuZGluZyBkaXNlYXNlcyBhbmQgY3JlYXRpbmcgYnJlYWt0
aHJvdWdoIHRyZWF0bWVudHMgYnkgdmlzaXRpbmcgdW5jLmVkdS4NCg0KSGVyZSBhdCBD
YXJvbGluYSBhbmQgYXJvdW5kIHRoZSB3b3JsZCwgT2xpdmVyIGlzIGJlaW5nIHJlbWVt
YmVyZWQgYXMgYSBsb3ZpbmcsIHdvbmRlcmZ1bCBmb3JjZSBmb3IgYWxsIHRoaW5ncyBn
b29kLiBBIGtpbmQgYW5kIGh1bWJsZSBtYW4sIE9saXZlciB3YXMgYSBwcmVjaW91cyBn
aWZ0IHdobyBhbHdheXMgZGVsaWdodGVkIHVzIHdpdGggaGlzIHZpZXdzIG9uIHNjaWVu
Y2Ugd2hpbGUgaGUgY2FwdHVyZWQgb3VyIGxvdmUgd2l0aCBoaXMgaW5mZWN0aW91cyBz
ZW5zZSBvZiBodW1vciBhbmQgd2FybSBwZXJzb25hbGl0eS4NCg0KT25lIG9mIG15IGZv
bmRlc3QgbWVtb3JpZXMgd2lsbCBhbHdheXMgYmUgYSBsdW5jaCBJIGhhZCB3aXRoIE9s
aXZlciBhbmQgaGlzIHdpZmUsIERyLiBOb2J1eW8gTWFlZGEsIGEgZmVsbG93IGZhY3Vs
dHkgbWVtYmVyIGFuZCBkaXN0aW5ndWlzaGVkIHJlc2VhcmNoZXIuIEkgd2FzIHVwbGlm
dGVkIGFuZCBpbnNwaXJlZCBieSB0aGVpciByZWxhdGlvbnNoaXAsIGpveWZ1bCBhdHRp
dHVkZSBhYm91dCBsaWZlIGFuZCBnZW5lcm9zaXR5IG9mIHNwaXJpdC4NCg0KQXMgd2Ug
Y2VsZWJyYXRlIGFuZCByZW1lbWJlciBhIHdvbmRlcmZ1bCBwZXJzb24gd2hvIG1lYW50
IHNvIG11Y2ggdG8gc28gbWFueSwgSSBlbmNvdXJhZ2UgZXZlcnlvbmUgdG8gcmVmbGVj
dCB1cG9uIERyLiBPbGl2ZXIgU21pdGhpZXPigJkgYW1hemluZyBjb250cmlidXRpb25z
IHRvIG91ciB3b3JsZCBhbmQgYXBwcmVjaWF0ZSB3aGF0IGEgdHJlbWVuZG91cyBnaWZ0
IGhlIHdhcyB0byBhbGwgb2YgdXMuDQoNClNpbmNlcmVseSwNCg0KQ2Fyb2wgTC4gRm9s
dA0KQ2hhbmNlbGxvcg0KDQpUaGlzIG1lc3NhZ2UgaXMgc3BvbnNvcmVkIGJ5OiBPZmZp
Y2Ugb2YgdGhlIENoYW5jZWxsb3I=