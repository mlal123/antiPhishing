DQpEZWFyIENhbXB1cyBDb21tdW5pdHksDQoNCkF0IGxhc3QgeWVhcuKAmXMgVW5pdmVy
c2l0eSBEYXkgY2VyZW1vbnksIHdlIG5hbWVkIDIxIHNjaG9sYXJzaGlwcyBmb3IgTm90
ZXdvcnRoeSBGaXJzdHPCoOKAlCBjb3VyYWdlb3VzIHBlb3BsZSB3aG8gaGVscGVkIGJy
ZWFrIGRvd24gYmFycmllcnMgYW5kIHBhdmUgdGhlIHdheSBmb3Igb3RoZXJzIGF0IENh
cm9saW5hLiBXZSBzYWlkIHRoYXQgdGhlc2UgbmV3bHkgbmFtZWQgZ3JhbnRzIGFuZCBm
ZWxsb3dzaGlwcyB3ZXJlIGEgc3RhcnRpbmcgcG9pbnQsIGFuZCB3ZSBwbGVkZ2VkIHRv
IGZpbmQgYWRkaXRpb25hbCB3YXlzIHRvIHNoYXJlIHRoZSBoaXN0b3J5IG9mIENhcm9s
aW5hIGFuZCB0byBhY2NlbGVyYXRlIG91ciBpbmNsdXNpb24gYW5kIGRpdmVyc2l0eSBl
ZmZvcnRzLg0KDQpMYXN0IHdlZWssIGR1cmluZyBjZXJlbW9uaWVzIGNvbW1lbW9yYXRp
bmcgQ2Fyb2xpbmHigJlzIDIyNHRoIGJpcnRoZGF5LCB3ZSBhbm5vdW5jZWQgb3VyIG5l
eHQgc3RlcCBmb3J3YXJkLiBGb3IgdGhpcyBuZXcgcm91bmQgb2YgbmFtZWQgc2Nob2xh
cnNoaXBzLCB3ZSB3ZWxjb21lIHlvdXIgbm9taW5hdGlvbnMgZm9yIEJyaWRnZSBCdWls
ZGVycyDigJQgcGVvcGxlIHdob3NlIHdvcmssIGFkdm9jYWN5IGFuZCBwZXJzb25hbCBl
eGFtcGxlIGhlbHBlZCBmb3JnZSBhIG1vcmUgaW5jbHVzaXZlLCB1bmlmaWVkIGFuZCBh
c3BpcmF0aW9uYWwgQ2Fyb2xpbmEgY29tbXVuaXR5LiBXZSBhbHNvIGJlbGlldmUgc2No
b2xhcnNoaXBzIGJlYXJpbmcgdGhlIG5hbWVzIG9mIEJyaWRnZSBCdWlsZGVycyB3aWxs
IG1vdGl2YXRlIG91ciBzdHVkZW50cyB0byBzdWNjZWVkIGluIHRoZWlyIG93biBwZXJz
b25hbCBqb3VybmV5cyBhdCBDYXJvbGluYS4NCg0KVG8gbm9taW5hdGUgc29tZW9uZSBh
cyBhIEJyaWRnZSBCdWlsZGVyLCBwbGVhc2UgZm9sbG93IHRoaXMgbGluay4gWW91IGNh
biBzdWJtaXQgbm9taW5hdGlvbnMgdGhyb3VnaCBUdWVzZGF5LCBPY3RvYmVyIDMxLiBJ
ZiB5b3UgaGF2ZSBxdWVzdGlvbnMgYWJvdXQgdGhlc2Ugc2Nob2xhcnNoaXBzLCBwbGVh
c2UgY29udGFjdCBFcmljIEwuIEpvaG5zb24gYXQgZXJpY2pvaG5zb25AdW5jLmVkdS4N
Cg0KVGhhbmsgeW91IGZvciBoZWxwaW5nIHVzIHJlY29nbml6ZSB0aGUgcmVtYXJrYWJs
ZSBwZW9wbGUgd2hvIGNyZWF0ZWQgdGhlIENhcm9saW5hIHdlIGtub3cgdG9kYXkuDQoN
ClNpbmNlcmVseSwNCg0KQ2Fyb2wgTC4gRm9sdA0KQ2hhbmNlbGxvcg0KDQrCoA0KDQpU
aGlzIG1lc3NhZ2UgaXMgc3BvbnNvcmVkIGJ5OiBPZmZpY2Ugb2YgdGhlIENoYW5jZWxs
b3I=