DQpEZWFyIENhbXB1cyBDb21tdW5pdHk6DQoNCkkgd2FudGVkIHRvIHRha2UgYSBtb21l
bnQgdG8gcmVtaW5kIHlvdSB0aGF0IHRoZSBCb2FyZCBvZiBHb3Zlcm5vcnMgb2YgdGhl
IFVuaXZlcnNpdHkgb2YgTm9ydGggQ2Fyb2xpbmEgc3lzdGVtIGlzIGluIHRoZSBwcm9j
ZXNzIG9mIGRldmVsb3BpbmcgYSBzdHJhdGVnaWMgcGxhbiB0aGF0IHdpbGwgZ3VpZGUg
ZGVjaXNpb24gbWFraW5nIGluIHRoZSB5ZWFycyBhaGVhZCwgaW5jbHVkaW5nIGltcG9y
dGFudCBkZWNpc2lvbnMgdGhhdCB3aWxsIGFmZmVjdCBDYXJvbGluYS4NCg0KVGhlIFVO
QyBzeXN0ZW0gc3RyYXRlZ2ljIHBsYW4gaXMgY2VudGVyZWQgYXJvdW5kIHRoZSBmb2xs
b3dpbmcgZml2ZSB0aGVtZXM6IGFjY2Vzczsgc3R1ZGVudCBzdWNjZXNzOyBhZmZvcmRh
YmlsaXR5IGFuZCBlZmZpY2llbmN5OyBleGNlbGxlbnQgYW5kIGRpdmVyc2UgaW5zdGl0
dXRpb25zOyBhbmQgZWNvbm9taWMgaW1wYWN0LiBGb3IgYWRkaXRpb25hbCBpbmZvcm1h
dGlvbiBvbiB0aGVzZSB0aGVtZXMsIGFzIHdlbGwgYXMgaW5mb3JtYXRpb24gcmVnYXJk
aW5nIHRoZSBvdmVyYWxsIHByb2Nlc3MsIHBsZWFzZSB2aXNpdCB0aGXCoFVOQyBTdHJh
dGVnaWMgUGxhbm5pbmcgd2Vic2l0ZS4NCg0KSGVyZSBhdCBDYXJvbGluYSwgd2UgYXJl
IGFsc28gZW5nYWdlZCBpbiBvdXIgb3duIHVuaXZlcnNpdHktd2lkZSBwbGFubmluZyBp
bml0aWF0aXZlLiBUaGlzIFVOQyBTeXN0ZW0gZWZmb3J0IGlzIHNlcGFyYXRlIGZyb20g
Q2Fyb2xpbmHigJlzIHBsYW5uaW5nIHByb2Nlc3MsIGJ1dCBhbHNvIHJlcXVpcmVzIGNh
cmVmdWwgY29uc2lkZXJhdGlvbi4NCg0KT3VyIGNvbGxlYWd1ZXMgYXQgdGhlIHN5c3Rl
bSBhcmUgYXNraW5nIGZvciBvdXIgaGVscCB3aXRoIHR3byB0aGluZ3M6DQoNCkNvbXBs
ZXRpbmcgdGhlIEJPRyBTdHJhdGVnaWMgUGxhbm5pbmcgU3VydmV5DQpVTkMgR2VuZXJh
bCBBZG1pbmlzdHJhdGlvbiwgaW4gY29uc3VsdGF0aW9uIHdpdGggdGhlIFVOQyBGYWN1
bHR5IEFzc2VtYmx5LCBoYXZlIGFsc28gZGV2ZWxvcGVkIGEgc3VydmV5IG9yZ2FuaXpl
ZCBhcm91bmQgdGhlIGZpdmUgdGhlbWVzIGFuZCBlbmNvdXJhZ2UgeW91ciBwYXJ0aWNp
cGF0aW9uLiBBIGxpbmsgdG8gdGhlIHN1cnZleSBjYW4gYmUgZm91bmQgYmVsb3csIGFz
IHdlbGwgYXMgb24gdGhlwqBTdHJhdGVnaWMgUGxhbm5pbmfCoHdlYnNpdGU6aHR0cHM6
Ly9ub3J0aGNhcm9saW5hLmNvMS5xdWFsdHJpY3MuY29tL1NFLz9TSUQ9U1ZfMVhLeVE3
SjNvOGRWelA3LsKgUGxlYXNlIGJlIGFzc3VyZWQgdGhhdCBhbGwgcmVzcG9uc2VzIHJl
Y2VpdmVkIHdpbGwgYmUgY29uZmlkZW50aWFsIGFuZCBnaXZlbiBjYXJlZnVsIGNvbnNp
ZGVyYXRpb24gYXMgdGhlIHBsYW5uaW5nIHByb2Nlc3MgbW92ZXMgZm9yd2FyZC4NCkF0
dGVuZGluZyB0aGUgQk9HIFN0cmF0ZWdpYyBQbGFubmluZyBGb3J1bQ0KQWxsIFVOQy1D
aGFwZWwgSGlsbCBzdHVkZW50cywgZmFjdWx0eSBhbmQgc3RhZmYgYXJlIGludml0ZWQg
dG8gcGFydGljaXBhdGUgaW4gYW4gb3BlbiBmb3J1bSBob3N0ZWQgYnkgc2VuaW9yIGxl
YWRlcnMgZnJvbSBVTkMgR2VuZXJhbCBBZG1pbmlzdHJhdGlvbiBhbmQgVU5DLUNoYXBl
bCBIaWxsIGZyb23CoDMg4oCTIDUgcC5tLiBvbiBUaHVyc2RheSwgTm92LiAxMCBhdCB0
aGUgQ2VudGVyIGZvciBTY2hvb2wgTGVhZGVyc2hpcCBEZXZlbG9wbWVudCBCb2FyZCBS
b29tKGJlaGluZCB0aGUgRnJpZGF5IENlbnRlciksIERpcmVjdGlvbnMgdG8gQ1NMRCBh
cmXCoGhlcmUuIFRoZXJlIGlzIHBsZW50eSBvZiBmcmVlIHBhcmtpbmcgYXZhaWxhYmxl
LiBUaGlzIGlzIGEgd29uZGVyZnVsIG9wcG9ydHVuaXR5IHRvIHNoYXJlIHlvdXIgZmVl
ZGJhY2sgb24gdGhlIHN0cmF0ZWdpYyB0aGVtZXMgYW5kIHByaW9yaXRpZXMuDQpGb3Ig
YW55IHN0cmF0ZWdpYyBwbGFuIHRvIGJlIG1lYW5pbmdmdWwgYW5kIHN1Y2Nlc3NmdWws
IGl0IGlzIGVzc2VudGlhbCB0byB1bmRlcnN0YW5kIHRoZSBwZXJzcGVjdGl2ZXMgb2Yg
YXMgbWFueSBpbmRpdmlkdWFscyBhbmQgY29uc3RpdHVlbmNpZXMgYXMgcG9zc2libGUu
IEkgZW5jb3VyYWdlIHlvdSB0byBwcm92aWRlIGZlZWRiYWNrIHRvIHRoZSBCb2FyZCBv
ZiBHb3Zlcm5vcnMgYnkgY29tcGxldGluZyB0aGUgc3VydmV5IG9yIGF0dGVuZGluZyB0
aGUgZm9ydW0uDQoNClNpbmNlcmVseSwNCg0KQ2Fyb2wgTC4gRm9sdA0KQ2hhbmNlbGxv
cg0KDQpUaGlzIG1lc3NhZ2UgaXMgc3BvbnNvcmVkIGJ5OiBPZmZpY2Ugb2YgdGhlIENo
YW5jZWxsb3I=