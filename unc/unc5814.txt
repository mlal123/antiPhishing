DQpEZWFyIENhbXB1cyBDb21tdW5pdHk6DQoNCkF0IHRoaXMgdGltZSBvZiB5ZWFyLCBJ
IGFtIG5vcm1hbGx5IHdyaXRpbmcgdG8gb3VyIGNvbW11bml0eSwgbWFueSBvZiB5b3Ug
Zm9yIHRoZSBmaXJzdCB0aW1lLCB3ZWxjb21pbmcgeW91IHRvIGNhbXB1cyBhbmQgc2hh
cmluZyBteSBleGNpdGVtZW50IGFib3V0IHRoZSBvcHBvcnR1bml0aWVzIHRoYXQgYXdh
aXQgeW91LiBJIHdpbGwgYmUgZG9pbmcgdGhhdCBpbiB0aGUgY29taW5nIGRheXMsIGFu
ZCB0YWtpbmcgYXMgbWFueSBvcHBvcnR1bml0aWVzIGFzIHBvc3NpYmxlIHRvIG1lZXQg
YW5kIGdyZWV0IHlvdS4NCg0KU2FkbHksIHRoZSB0cmFnaWMgYW5kIGRlcGxvcmFibGUg
ZXZlbnRzIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFZpcmdpbmlhIGFuZCBpbiBDaGFybG90
dGVzdmlsbGUgb3ZlciB0aGUgd2Vla2VuZCBoYXZlIHRha2VuIHByZWNlZGVuY2Ugbm90
IG9ubHkgaGVyZSBhdCBDYXJvbGluYSwgYnV0IGF0IGNvbGxlZ2VzIGFuZCB1bml2ZXJz
aXRpZXMgYWNyb3NzIHRoZSBuYXRpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSBhY2FkZW1p
YyB5ZWFyLiBJIHdhbnQgdG8gYmVnaW4gYnkgZW1waGFzaXppbmcgb3VyIGNvcmUgdmFs
dWVzIGFuZCByZW1pbmRpbmcgZXZlcnlvbmUgdGhhdCB5b3VyIHNhZmV0eSBhbmQgd2Vs
bC1iZWluZyBhcmUgbXkgYW5kIHRoZSBVbml2ZXJzaXR54oCZcyBtb3N0IGltcG9ydGFu
dCBwcmlvcml0aWVzLg0KDQpUaGUgc2NlbmVzIG9mIHZpb2xlbmNlLCB0b3JjaC0gYW5k
IGd1bi1iZWFyaW5nIHByb3Rlc3RvcnMsIGFuZCBwZW9wbGUgd2VhcmluZyBLS0sgYW5k
IE5hemkgc3ltYm9scyBhbmQgc2hvdXRpbmcgaGF0ZWZ1bCBzbG9nYW5zIHdlcmUgdGVy
cmlmeWluZyBhbmQgaGF2ZSBubyBwbGFjZSBvbiBvdXIgY2FtcHVzZXMgb3IgaW4gb3Vy
IHNvY2lldHkuIEF0IENhcm9saW5hLCBkaXZlcnNpdHksIGluY2x1c2lvbiBhbmQgZnJl
ZWRvbSBvZiBzcGVlY2ggYXJlIGF0IG91ciBjb3JlIGFuZCB0cnVseSBsaXZpbmcgdXAg
dG8gdGhlbSBjYW4gYmUgZGlmZmljdWx0LiBXZSBrbm93IHRoYXQgdGhlIHN0cmVuZ3Ro
IG9mIG91ciBjb21tdW5pdHkgY29tZXMgZnJvbSB0aGUgZGlmZmVyZW5jZXMgdGhhdCB3
ZSBlYWNoIGJyaW5nLiBPdXRwb3VyaW5ncyBvZiBoYXRlLCB2aW9sZW5jZSBhbmQgaW50
aW1pZGF0aW9uIGNhbiB0ZWFyIGFwYXJ0IHRoZSBmYWJyaWMgb2Ygb3BlbiBjb21tdW5p
dGllcyBsaWtlIG91cnMsIGFuZCB3ZSBuZWVkIHRvIGJlIHZpZ2lsYW50IGFnYWluc3Qg
dGhlbS4NCg0KTWFueSBvZiB5b3UgaGF2ZSBleHByZXNzZWQgY29uY2VybnMgYWJvdXQg
aG93IHNpbWlsYXIgZXZlbnRzIG1pZ2h0IGFmZmVjdCBvdXIgY2FtcHVzIGFuZCBjb21t
dW5pdHkuIEkgYXNrZWQgVmljZSBDaGFuY2VsbG9yIGFuZCBHZW5lcmFsIENvdW5zZWwg
TWFyayBNZXJyaXR0LCBWaWNlIENoYW5jZWxsb3Igb2YgU3R1ZGVudCBBZmZhaXJzIFdp
bnN0b24gQ3Jpc3AgYW5kIFBvbGljZSBDaGllZiBKZWZmIE1jQ3JhY2tlbiB0byBhZGRy
ZXNzIHNvbWUgb2YgeW91ciBxdWVzdGlvbnMgcmVsYXRlZCB0byB0aGUgRmlyc3QgQW1l
bmRtZW50LCBsYXdzIGdvdmVybmluZyB0aGUgQ29uZmVkZXJhdGUgTW9udW1lbnQgYW5k
IG91dHNpZGUgc3BlYWtlcnMsIGFzIHdlbGwgYXMgdG8gcHJvdmlkZSBpbmZvcm1hdGlv
biBvbiByZXNvdXJjZXMgYXZhaWxhYmxlIHRvIHN0dWRlbnRzLCBmYWN1bHR5IGFuZCBz
dGFmZi4gSSBlbmNvdXJhZ2UgeW91IHRvIHRha2UgdGhlIHRpbWUgdG8gcmVhZCB0aGlz
IGhlbHBmdWwgYW5kIHRpbWVseSBpbmZvcm1hdGlvbi7CoFRoZXNlIGlzc3VlcyBhcmUg
Y29tcGxleCwgYW5kIHdlIHdlbGNvbWUgeW91ciBxdWVzdGlvbnMgYW5kIGNvbmNlcm5z
LiBUaGlzIGlzIGp1c3QgdGhlIHN0YXJ0IG9mIG91ciBjb252ZXJzYXRpb24gdGhpcyBh
Y2FkZW1pYyB5ZWFyIG9uIHRoZXNlIGltcG9ydGFudCB0b3BpY3MgZmFjaW5nIG91ciBj
YW1wdXMgYW5kIG91ciBjb3VudHJ5Lg0KDQpDb2xsZWdlIGNhbXB1c2VzLCBsaWtlIENh
cm9saW5hLCBhcmUgaG9tZXMgdG8gdGhlIG5hdGlvbuKAmXMgZHJlYW1zIGFib3V0IHRo
ZSBwb3RlbnRpYWwgZm9yIHRoZSBmdXR1cmUuIFdlIHRocml2ZSBvbiB0aGUgZGl2ZXJz
aXR5IG9mIHBlb3BsZSBhbmQgb3BpbmlvbiwgYW5kIGdyb3cgdGhyb3VnaCBob25lc3Qg
ZGViYXRlIGFuZCBxdWVzdHMgZm9yIG5ldyBrbm93bGVkZ2UuIEV2ZXJ5IG9uZSBvZiB1
cyBoYXMgdGhlIHJlc3BvbnNpYmlsaXR5IHRvIHVwaG9sZCBvdXIgc2hhcmVkIHZhbHVl
cy4gVG9nZXRoZXIsIHdlIG1ha2UgQ2Fyb2xpbmEgYSBwbGFjZSB3aGVyZSBncmVhdCBp
ZGVhcyBjYW4gYmUgc2hhcmVkLCBkZWJhdGVkIGFuZCB3aGVyZSB3ZSBhbGwgZmVlbCBz
YWZlLg0KDQpTaW5jZXJlbHksDQoNCkNhcm9sIEwuIEZvbHQNCkNoYW5jZWxsb3INCg0K
DQoNCg0KVGhpcyBtZXNzYWdlIGlzIHNwb25zb3JlZCBieTogT2ZmaWNlIG9mIHRoZSBD
aGFuY2VsbG9y