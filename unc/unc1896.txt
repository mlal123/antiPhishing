DQpEZWFyIENhbXB1cyBDb21tdW5pdHk6DQoNClByb3Zvc3QgSmltIERlYW4gYW5kIEkg
YXJlIHBsZWFzZWQgdG8gYW5ub3VuY2UgdGhhdCBGb3VhZCBBYmQtRWwtS2hhbGljayBo
YXMgYmVlbiBzZWxlY3RlZCBhcyB0aGUgbmV3IGRlYW4gZm9yIHRoZSBTY2hvb2wgb2Yg
RWR1Y2F0aW9uLCBvbmUgb2YgdGhlIG9sZGVzdCBwcm9mZXNzaW9uYWwgc2Nob29scyBh
dCBDYXJvbGluYS4gSGUgaXMgY3VycmVudGx5IHRoZSBhc3NvY2lhdGUgZGVhbiBmb3Ig
cmVzZWFyY2ggYW5kIHJlc2VhcmNoIGVkdWNhdGlvbiBpbiB0aGUgQ29sbGVnZSBvZiBF
ZHVjYXRpb24gYXQgdGhlIFVuaXZlcnNpdHkgb2YgSWxsaW5vaXMgYXQgVXJiYW5hLUNo
YW1wYWlnbiAoVUlVQykuIFRoZSBVbml2ZXJzaXR5IGFwcG9pbnRtZW50LCBlZmZlY3Rp
dmUgSnVseSAxLCB3YXMgYXBwcm92ZWQgYnkgdGhlIFVuaXZlcnNpdHnigJlzIEJvYXJk
IG9mIFRydXN0ZWVzLg0KDQpBYmQtRWwtS2hhbGljayBoYXMgYmVlbiBhdCBVSVVDIHNp
bmNlIDIwMDAsIHdoZXJlIGhlIGlzIHRoZSBHcmF5Y2UgV2ljYWxsIEdhdXRoaWVyIFBy
b2Zlc3NvciBvZiBFZHVjYXRpb24uIEhlIGhhcyBwdWJsaXNoZWQgZXh0ZW5zaXZlbHkg
aW4gc2NpZW5jZSBlZHVjYXRpb24gYW5kIGlzIGFuIGF3YXJkLXdpbm5pbmcgdGVhY2hl
ci4gSGlzIHJlc2VhcmNoIGhhcyByZWd1bGFybHkgYXR0cmFjdGVkIGdyYW50IHN1cHBv
cnQsIGluY2x1ZGluZyBhICQ1IG1pbGxpb24gTmF0aW9uYWwgU2NpZW5jZSBGb3VuZGF0
aW9uIGdyYW50IGZvciBhbiBpbml0aWF0aXZlIHRoYXQgc291Z2h0IHRvIG51cnR1cmUg
dGhlIGRldmVsb3BtZW50IG9mIGVudHJlcHJlbmV1cmlhbCBhbmQgdHJhbnNmb3JtYXRp
dmUgdGVhY2hlciBsZWFkZXJzIHdobyBzdWJzdGFudGlhbGx5IGltcHJvdmVkIHNjaWVu
Y2UgdGVhY2hpbmcgYW5kIGxlYXJuaW5nLg0KDQpBYmQtRWwtS2hhbGljayBncmV3IHVw
IGluIExlYmFub24sIGVhcm5pbmcgYSBCYWNoZWxvciBvZiBTY2llbmNlIGRlZ3JlZSBp
biBiaW9sb2d5LCBhIGRpcGxvbWEgaW4gdGVhY2hpbmcgc2Vjb25kYXJ5IHNjaWVuY2Ug
YW5kIGEgTWFzdGVyIG9mIEFydHMgaW4gc2NpZW5jZSBlZHVjYXRpb24gZnJvbSB0aGUg
QW1lcmljYW4gVW5pdmVyc2l0eSBvZiBCZWlydXQuIEhlIGNhbWUgdG8gdGhlIFVuaXRl
ZCBTdGF0ZXMgZm9yIGdyYWR1YXRlIHNjaG9vbCwgZWFybmluZyBhIGRvY3RvcmF0ZSBp
biBzY2llbmNlIGVkdWNhdGlvbiBmcm9tIE9yZWdvbiBTdGF0ZSBVbml2ZXJzaXR5IGlu
IDE5OTguDQoNCkFmdGVyIGVhcm5pbmcgaGlzIGRvY3RvcmF0ZSwgQWJkLUVsLUtoYWxp
Y2sgc3BlbnQgdHdvIHllYXJzIG9uIHRoZSBmYWN1bHR5IGF0IHRoZSBBbWVyaWNhbiBV
bml2ZXJzaXR5IG9mIEJlaXJ1dCBpbiB0aGUgRGVwYXJ0bWVudCBvZiBFZHVjYXRpb24g
YmVmb3JlIGpvaW5pbmcgVUlVQy4NCg0KQWJkLUVsLUtoYWxpY2sgc2VydmVzIGFzIGNv
LWVkaXRvciBvZiB0aGUgSm91cm5hbCBvZiBSZXNlYXJjaCBpbiBTY2llbmNlIFRlYWNo
aW5nIGFuZCBzZXJ2ZXMgb24gdGhlIGV4ZWN1dGl2ZSBib2FyZCBvZiB0aGUgTmF0aW9u
YWwgQXNzb2NpYXRpb24gZm9yIFJlc2VhcmNoIGluIFNjaWVuY2UgVGVhY2hpbmcgKE5B
UlNUKS4NCg0KQWJkLUVsLUtoYWxpY2sgc3VjY2VlZHMgQmlsbCBNY0RpYXJtaWQsIHdo
byBzZXJ2ZWQgYXMgZGVhbiBmcm9tIDIwMDkgdG8gdGhlIGVuZCBvZiAyMDE1LCBsZWFk
aW5nIHRoZSBzY2hvb2wgYXMgaXQgYnVpbHQgbmV3IGFjYWRlbWljIHByb2dyYW1zIGFu
ZCBwcmVwYXJlZCBmb3IgYSBjYXBpdGFsIGNhbXBhaWduLiBEdXJpbmcgaGlzIHRlbnVy
ZSwgdGhlIHNjaG9vbCB3YXMgcmVzdHJ1Y3R1cmVkIHRvIGNyZWF0ZSBzaGFyZWQgZ292
ZXJuYW5jZSBhbmQgYSBuZXcgc3RyYXRlZ2ljIGRpcmVjdGlvbiB3YXMgcHV0IGluIHBs
YWNlIHRvIG5hdmlnYXRlIHRoZSBmdXR1cmUuwqAgQWxzbywgdGhlIHNjaG9vbCBlc3Rh
Ymxpc2hlZCBmaXZlIG5ldyBuYW1lZCBwcm9mZXNzb3JzaGlwcywgaW5jcmVhc2VkIHRo
ZSBzaXplIG9mIHRoZSBmYWN1bHR5IGZyb20gNDkgdG8gNTYsIHJlY3J1aXRlZCBlaWdo
dCBuZXcgZmFjdWx0eSBtZW1iZXJzIGZyb20gdW5kZXItcmVwcmVzZW50ZWQgZ3JvdXBz
IGFuZCByZXRhaW5lZCBrZXkgZmFjdWx0eSBtZW1iZXJzIGJlaW5nIHJlY3J1aXRlZCBi
eSBvdGhlciBpbnN0aXR1dGlvbnMuIEhlIGxlYXZlcyB0aGUgc2Nob29sIHdlbGwgcG9z
aXRpb25lZCB0byBidWlsZCBpdHMgc3RyZW5ndGhzIGFuZCBjb250aW51ZSB0byBzZXJ2
ZSB0aGUgVW5pdmVyc2l0eS4NCg0KRGVib3JhaCBFYWtlci1SaWNoLCBzZW5pb3IgYXNz
b2NpYXRlIGRlYW4gYW5kIGNoaWVmIGFjYWRlbWljIG9mZmljZXIgZm9yIHRoZSBTY2hv
b2wgb2YgRWR1Y2F0aW9uLCBoYXMgc2VydmVkIGFzIGludGVyaW0gZGVhbiBzaW5jZSBK
YW51YXJ5Lg0KDQpQbGVhc2Ugam9pbiBtZSBpbiBjb25ncmF0dWxhdGluZyBGb3VhZCBB
YmQtRWwtS2hhbGljayBvbiBoaXMgYXBwb2ludG1lbnQgYW5kIGluIHRoYW5raW5nIGJv
dGjCoEJpbGwgTWNEaWFybWlkIGZvciBoaXMgc2VydmljZSBhcyBkZWFuIGFuZCBEZWJv
cmFoIEVha2VyLVJpY2ggZm9yIGhlciB3b3JrIGFzIGludGVyaW0gZGVhbi7CoA0KDQpT
aW5jZXJlbHksDQpDYXJvbCBMLiBGb2x0DQpDaGFuY2VsbG9yDQoNCkphbWVzIFcuIERl
YW4gSnIuDQpFeGVjdXRpdmUgVmljZSBDaGFuY2VsbG9yIGFuZCBQcm92b3N0DQoNCsKg
DQoNClRoaXMgbWVzc2FnZSBpcyBzcG9uc29yZWQgYnk6IE9mZmljZSBvZiB0aGUgQ2hh
bmNlbGxvcg==