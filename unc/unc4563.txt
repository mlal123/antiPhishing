RGVhciBTdHVkZW50LA0KDQoNCg0KDQoNCldlbGNvbWUgdG8gcmVnaXN0cmF0aW9uIGZv
ciBTdW1tZXIgMjAxNy4gIFRocm91Z2ggeW91ciBDb25uZWN0Q2Fyb2xpbmEgU3R1ZGVu
dCBDZW50ZXIsIHlvdSBtYXkgc2VhcmNoIGZvciBjbGFzc2VzIGFuZCBzdGFydCBhZGRp
bmcgdGhlbSB0byB5b3VyIHNob3BwaW5nIGNhcnQgdG8gcHJlcGFyZSBmb3IgeW91ciBh
Y3R1YWwgcmVnaXN0cmF0aW9uLCB3aGljaCB3aWxsIGJlIG9wZW4gYXQgdGhlIGRhdGUg
YW5kIHRpbWUgc3BlY2lmaWVkIGluIHlvdXIgZW5yb2xsbWVudCBhcHBvaW50bWVudC4g
IA0KDQoNCkNoZWNrIG91dCBvdXIgd2Vic2l0ZSBhdCBodHRwOi8vcmVnaXN0cmFyLnVu
Yy5lZHUgZm9yIGhlbHBmdWwgaW5mb3JtYXRpb24sIGluY2x1ZGluZyByZWdpc3RyYXRp
b24gcG9saWNpZXMuICAgT3VyIFJlZ2lzdHJhdGlvbiBHdWlkZSAoaHR0cDovL3JlZ2lz
dHJhci51bmMuZWR1L2d1aWRlLykgY29udGFpbnMgaGVscGZ1bCByZXNvdXJjZXMsIHNj
aGVkdWxlIHBsYW5uaW5nIHRvb2xzLCBhbmQgb3VyIGNvbnRhY3QgaW5mb3JtYXRpb24u
DQoNCg0KQmUgc3VyZSB0byBjaGVjayBpbXBvcnRhbnQgcmVnaXN0cmF0aW9uIGRhdGVz
IGVhY2ggdGVybSBvbiBvdXIgVW5pdmVyc2l0eSBSZWdpc3RyYXIgY2FsZW5kYXIgYXQg
aHR0cDovL3JlZ2lzdHJhci51bmMuZWR1L2FjYWRlbWljLWNhbGVuZGFyLy4gIA0KDQoN
ClRvIGxvZyBpbiB0byB5b3VyIENvbm5lY3RDYXJvbGluYSBTdHVkZW50IENlbnRlciwg
dmlzaXQgaHR0cDovL2Nvbm5lY3RjYXJvbGluYS51bmMuZWR1LCBjbGljayBvbiB0aGUg
IkxvZ2luIHRvIENvbm5lY3RDYXJvbGluYSBTdHVkZW50IENlbnRlciIgbGluayBvbiB0
aGUgcmlnaHQsIGFuZCBzaWduIGluIHdpdGggeW91ciBvbnllbiBhbmQgcGFzc3dvcmQu
ICANCg0KDQpUaGlzIGlzIGFsc28gYSBnb29kIHRpbWUgdG8gbWFrZSBzdXJlIHlvdXIg
YWRkcmVzcyBhbmQgcGhvbmUgbnVtYmVyIGFyZSB1cCB0byBkYXRlLiAgIEFmdGVyIGxv
Z2dpbmcgaW4gdG8gdGhlIENvbm5lY3RDYXJvbGluYSBTdHVkZW50IENlbnRlciwgY2xp
Y2sgb24gdGhlICJIb21lIiBsaW5rIG9uIHRoZSB0b3AgcmlnaHQgYW5kIHRoZW4gY2xp
Y2sgb24gdGhlICJVcGRhdGUgUGVyc29uYWwgSW5mb3JtYXRpb24iIGxpbmsgdW5kZXIg
IlNlbGZTZXJ2aWNlLiINCg0KDQpUaGFuayB5b3UsDQoNCg0KT2ZmaWNlIG9mIHRoZSBV
bml2ZXJzaXR5IFJlZ2lzdHJhcg0KDQoNCjkxOS05NjItMzk1NA0KDQpUaGlzIG1lc3Nh
Z2UgaXMgc3BvbnNvcmVkIGJ5OiBPZmZpY2Ugb2YgdGhlIFVuaXZlcnNpdHkgUmVnaXN0
cmFy