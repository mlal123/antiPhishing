DQpEZWFyIENhbXB1cyBDb21tdW5pdHk6DQoNCkFsbCB5ZWFyLCB3ZSBoYXZlIGJlZW4g
aGF2aW5nIHBhc3Npb25hdGUgZGViYXRlIGFuZCBjb252ZXJzYXRpb24gYWJvdXQgaG93
IENhcm9saW5hIGNhbiBpbXByb3ZlIG91ciBlZmZvcnRzIHRvIHdlbGNvbWUgYW5kIGVu
c3VyZSBwYXJ0aWNpcGF0aW9uIG9mIGV2ZXJ5b25lIGluIHRoZSBmdWxsIGxpZmUgb2Yg
dGhlIFVuaXZlcnNpdHkuIFdlIGFyZSBncmF0ZWZ1bCB0byBhbGwgd2hvIGhhdmUgc2hh
cmVkIHRoZWlyIHRob3VnaHRzIHdpdGggdXMuIFdpdGhvdXQgeW91ciBwZXJzb25hbCBz
dG9yaWVzIGFuZCBpZGVhcywgd2UgY2Fubm90IGNyZWF0ZSB0aGUga2luZCBvZiBDYXJv
bGluYSBjb21tdW5pdHkgdGhhdCB3ZSBhbGwgd2FudC4NCg0KVGhhbmtzIHRvIHlvdXIg
ZWZmb3J0cyBhbmQgY29tbWl0bWVudCwgd2UgaGF2ZSBkb25lIG1vcmUgdGhhbiBkZWJh
dGUgYW5kIHRhbGs6IHdlIGhhdmUgYWN0ZWQuIE9uZSBleGFtcGxlIG9mIHRoaXMgYWN0
aW9uIGlzIGxhc3Qgd2Vla+KAmXMgcGFzc2FnZSBvZiBhwqBGYWN1bHR5IENvdW5jaWwg
cmVzb2x1dGlvbsKgcmVhZmZpcm1pbmcg4oCcaXRzIGNvbW1pdG1lbnQgdG8gdGhlIHZh
bHVlcyBvZiBkaXZlcnNpdHkgYW5kIGluY2x1c2lvbuKAnSBhbmQgcmVjb2duaXppbmcg
dGhhdCB0aGUgZGl2ZXJzaXR5IG9mIHRoZSBzdHVkZW50IGJvZHkgaXMg4oCcYSB2aXRh
bCBhbmQgbmVjZXNzYXJ5IGNvbXBvbmVudCBvZiBhY2FkZW1pYyBleGNlbGxlbmNlLuKA
nQ0KDQpPdGhlciBleGFtcGxlcyBpbmNsdWRlIGFjdGlvbnMgdGhhdCBncmV3IG91dCBv
ZiB0aGUgTm92ZW1iZXIgdG93biBoYWxsIG1lZXRpbmcgb24gcmFjZSBhbmQgaW5jbHVz
aW9uLiBBbGwgeWVhciB3ZSBoYXZlIGhlYXJkIGZyb20gbWFueSBvZiB5b3UgYWJvdXQg
eW91ciBjb25jZXJucy4gU2V2ZXJhbCBzaWduaWZpY2FudCBtZWV0aW5ncyB3aXRoIHN0
dWRlbnRzIHJlcHJlc2VudGluZyB2YXJpb3VzIGNhbXB1cyBjb25zdGl0dWVuY2llcyBo
ZWxwZWQgdXMgZ2F0aGVyIGZlZWRiYWNrLCBsZWFybiBtb3JlIGFib3V0IHRoZSB3YW50
cyBhbmQgbmVlZHMgb2Ygb3VyIGNvbW11bml0eSwgYW5kIHNoYXJlIHByb2dyZXNzIGFs
b25nIHdpdGggcGxhbnMgdG8gYnVpbGQgdXBvbiBleGlzdGluZyBlZmZvcnRzLsKgDQoN
CkhlcmUgaXMgYW4gdXBkYXRlIG9uIG91ciBwcm9ncmVzcy4gV2hpbGUgdGhlIGxpc3Qg
aXMgbm90IGV4aGF1c3RpdmUgYW5kIG91ciB3b3JrIGlzIGNvbnRpbnVpbmcgaW4gYWxs
IG9mIHRoZXNlIGFyZWFzLCB3ZSBob3BlIGl0IHByb3ZpZGVzIGEgYnJvYWQgc2Vuc2Ug
b2Ygd2hlcmUgd2UgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIGFjYWRlbWljIHllYXIuDQoN
ClNwYWNlczrCoEEgZGVkaWNhdGVkIHNwYWNlIGZvciBibGFjayBzdHVkZW50cyB0byBn
YXRoZXIgYXMgYSBjb21tdW5pdHkgd2lsbCBiZSBsb2NhdGVkIGF0IHRoZSBTdHVkZW50
IEFjYWRlbWljIFNlcnZpY2VzIEJ1aWxkaW5n4oCZcyBVcGVuZG8gTG91bmdlLiBUaGlz
IHVzZSBidWlsZHMgZGlyZWN0bHkgdXBvbiB0aGUgb3JpZ2luYWwgcHVycG9zZSBmb3Ig
dGhlIGNyZWF0aW9uIG9mIFVwZW5kbyBpbiAxOTcyLiBPdXIgZmFjaWxpdGllcyB0ZWFt
IGlzIGZpbmFsaXppbmcgcGxhbnMsIGFuZCB3aWxsIG1lZXQgd2l0aCBzdHVkZW50cyBz
b29uIHRvIHRhcmdldCBhIGZhbGwgMjAxNiBvcGVuaW5nLiBXZSBjb250aW51ZSB0byBl
eHBsb3JlIG5ldyBhbmQgaW1wcm92ZWQgc3BhY2VzIGZvciBvdGhlciBncm91cHMuIEFs
c28sIHdlIGFyZSBkZXNpZ25pbmcgYSBwdWJsaWMgYXJ0IHNwYWNlIHdpdGggbWFya2Vy
cyB0byByZXByZXNlbnQgdGhlIG5pbmUgTmF0aW9uYWwgUGFuaGVsbGVuaWMgQ291bmNp
bCBncm91cHMgdG8gc2hvdyB0aGVpciBoaXN0b3J5IGFuZCBjb250cmlidXRpb25zIHRv
IG91ciBjYW1wdXMuDQpDbGltYXRlIHN1cnZleTrCoFRoZSBVTkMgSW5jbHVzaW9uIGFu
ZCBEaXZlcnNpdHkgQ2xpbWF0ZSBTdXJ2ZXkgaXMgb3BlbiBub3cgZm9yIHN0dWRlbnRz
IGFuZCBzdGFmZiB0aHJvdWdoIE1heSA3LiBXZSBlbmNvdXJhZ2UgZXZlcnlvbmUgdG8g
cGFydGljaXBhdGUuIFN1cnZleSBkYXRhIHdpbGwgYmUgc2hhcmVkIGluIHRoZSBmYWxs
LCBhbmQgd2Ugd2lsbCB1c2UgaXQgdG8gaW5mb3JtIG91ciBlZmZvcnRzIGluIG1hbnkg
YXJlYXMgYXMgd2UgbW92ZSBmb3J3YXJkLg0KVHJhaW5pbmc6wqBEZXZlbG9wbWVudCBz
ZXNzaW9ucyBhbmQgZGlhbG9ndWUgb24gY29uc2Npb3VzIGFuZCB1bmNvbnNjaW91cyBi
aWFzIHRvb2sgcGxhY2Ugd2l0aCBkZWFucyBhbmQgdGhlIEJvYXJkIG9mIFRydXN0ZWVz
LiBBIHNlc3Npb24gaXMgcGxhbm5lZCBmb3IgdGhlIENoYW5jZWxsb3LigJlzIGNhYmlu
ZXQgb3ZlciB0aGUgc3VtbWVyLiBJbiBBdWd1c3QsIFVOQ+KAmXMgRm91cnRowqBBbm51
YWzCoERpdmVyc2l0eSBUSElOS3Bvc2l1bcKgZm9yIGZhY3VsdHkgYW5kIHN0YWZmIGZv
Y3VzZXMgb24gbWljcm9hZ2dyZXNzaW9ucywgYW5kIGluIHRoZSBmYWxsLCBJbnRlcmRl
cGVuZGVuY2UgV2VlayBicmluZ3MgdG9nZXRoZXIgZGl2ZXJzZSBjYW1wdXMgbGVhZGVy
cyBmb3IgdHJhaW5pbmcgYW5kIG9wcG9ydHVuaXRpZXMgdG8gcGFydG5lciBvbiBqb2lu
dCBzZXJ2aWNlIHByb2plY3RzLiBXZSBzdGlsbCBoYXZlIHdvcmsgdG8gZG8gaW4gZGV2
ZWxvcGluZyBtdWx0aWZhY2V0ZWQgdHJhaW5pbmcgcHJvZ3JhbXMgYW5kIGVkdWNhdGlv
bmFsIG9mZmVyaW5ncyB0aGF0IGNhbiByZWFjaCBldmVyeW9uZS4gVGhpcyB3aWxsIGJl
IGEgcHJpbWUgZm9jdXMgZm9yIG91ciB3b3JrIGluIGNvbWluZyBtb250aHMuDQpSZWNy
dWl0aW5nIGFuZCByZXRlbnRpb246wqBUaGUgUHJvdm9zdCwgdGhlIGRlYW5zIGFuZCB0
aGUgVmljZSBDaGFuY2VsbG9ywqBmb3IgV29ya2ZvcmNlIFN0cmF0ZWd5LCBFcXVpdHkg
YW5kIEVuZ2FnZW1lbnQgYXJlIHN0cmVuZ3RoZW5pbmcgdGhlIG1lY2hhbmlzbXMgdGhh
dCBmb3N0ZXIgaW5jbHVzaXZlIHNlYXJjaGVzLCB0YXJnZXRzIG9mIG9wcG9ydHVuaXR5
IGhpcmluZyBhbmQgY3VycmljdWxhciBlbmhhbmNlbWVudHMsIGFtb25nIG90aGVyIGlu
aXRpYXRpdmVzLg0KRmlyc3QtZ2VuZXJhdGlvbiBjb2xsZWdlIHN0dWRlbnRzOsKgVW5p
dmVyc2l0eSBsZWFkZXJzIGFyZSBjb21wbGV0aW5nIGEgc2VyaWVzIG9mIGNvbW11bmlj
YXRpb25zLCBzY2hlZHVsZWQgdG8gbGF1bmNoIHRoaXMgc3VtbWVyLCB0aGF0IHdpbGwg
d2VsY29tZSBuZXcgZmlyc3QtZ2VuZXJhdGlvbiBjb2xsZWdlIHN0dWRlbnRzIHRvIG91
ciBjb21tdW5pdHksIGNvbm5lY3QgdGhlbSB3aXRoIHJlc291cmNlcyBkdXJpbmcgb3Jp
ZW50YXRpb24gYW5kIGFmdGVyd2FyZHMsIGFuZCBoZWxwIHRoZW0gZ2V0IG9mZiB0byB0
aGUgc3Ryb25nZXN0IHBvc3NpYmxlIHN0YXJ0IGluIHRoZWlyIGZpcnN0IG1vbnRocyBh
dCBDYXJvbGluYS4NClN0dWRlbnQgc3VjY2VzczrCoEFzIHBhcnQgb2YgVGhyaXZlQENh
cm9saW5hLCB3aGljaCBpcyBvdXIgVW5pdmVyc2l0eS13aWRlIHN0dWRlbnQgc3VjY2Vz
cyBwcm9ncmFtLCB3ZSBhcmUgbGF1bmNoaW5nIHRoaXMgc3VtbWVyIGEgcmV0ZW50aW9u
IHN0dWR5IHRvIGNvbnNpZGVyIGFtb25nIG90aGVyIHF1ZXN0aW9ucywgd2F5cyBpbiB3
aGljaCBjbGltYXRlIGFuZCBpZGVudGl0eSBpbmZsdWVuY2UgYWNhZGVtaWMgcGVyZm9y
bWFuY2UgYW5kIGRlZ3JlZSBjb21wbGV0aW9uLg0KTWVudGFsIGhlYWx0aDrCoENvdW5z
ZWxpbmcgYW5kIFBzeWNob2xvZ2ljYWwgU2VydmljZXMgKENBUFMpIGFuZCBTdHVkZW50
IFdlbGxuZXNzIGhhdmUgZW5oYW5jZWQgbWVudGFsIGhlYWx0aCBhbmQgd2VsbG5lc3Mg
c2VydmljZXMgYnkgcHJvdmlkaW5nIGN1bHR1cmFsIGNvbXBldGVuY3kgdHJhaW5pbmcg
Zm9yIGl0cyBlbXBsb3llZXMgdGhhdCB3aWxsIGhlbHAgdGhlbSB0byBiZXR0ZXIgc2Vy
dmUgYWxsIHN0dWRlbnRzLsKgV2UgYWxzbyBhcmUgaGlyaW5nIGZvdXIgcG9zdGRvY3Rv
cmFsIHNvY2lhbCB3b3JrZXJzIHRvIGhlbHAgc3R1ZGVudHMgdHJhbnNpdGlvbiBmcm9t
IHNob3J0LXRlcm0gdG8gbG9uZy10ZXJtIHRoZXJhcHkuDQpOYW1pbmcgb3Bwb3J0dW5p
dGllczrCoEEgc3RlZXJpbmcgY29tbWl0dGVlIGlzIGRlc2lnbmluZyBhIHByb2Nlc3Mg
dG8gcmVuYW1lIHNjaG9sYXJzaGlwcywgZmVsbG93c2hpcHMgYW5kIHByb2dyYW1taW5n
IHRvIGhvbm9yIGFsdW1uaSwgZmFjdWx0eSBvciBzdGFmZiBtZW1iZXJzIHdob3NlIHN0
b3JpZXMgc2hvdWxkIGJlIG1vcmUgd2lkZWx5IHRvbGQuIFdlIGV4cGVjdCBzb21lIG5l
d2x5IG5hbWVkIGdyYW50cyB0byBiZSBhbm5vdW5jZWQgbmV4dCBmYWxsLg0KQ2FtcHVz
IHRvdXJzIGFuZCBvcmllbnRhdGlvbjrCoFRoZcKgVGFzayBGb3JjZSBvbiBVTkMtQ2hh
cGVsIEhpbGwgSGlzdG9yecKgaXMgaGVscGluZyBkZXZlbG9wIGEgZ2VuZXJhbCB0b3Vy
IHRoYXQgd2lsbCBpbmNsdWRlIGVsZW1lbnRzIG9mIHRoZSBCbGFjayBhbmQgQmx1ZSwg
TmF0aXZlIFZvaWNlcyBhbmQgV29tZW4gaW4gSGlzdG9yeSB0b3VycyBhbmQgbW9yZSwg
dG8gb3JpZW50IG5ld2NvbWVycyB0byBDYXJvbGluYeKAmXMgZnVsbCBoaXN0b3J5LiBU
aGlzIGVmZm9ydCBpcyBwYXJ0IG9mIGEgcGxhbiB0byB0ZWxsIENhcm9saW5h4oCZcyBo
aXN0b3J5IGluIG11bHRpcGxlIHdheXMgYW5kIGZvciBwb3RlbnRpYWwgdXNlIGluIG9y
aWVudGF0aW9uLiBXZSBhcmUgZXhwbG9yaW5nIGEgbnVtYmVyIG9mIGFkZGl0aW9uYWwg
b3JpZW50YXRpb24gaW5pdGlhdGl2ZXMgbW92aW5nIGZvcndhcmQuDQpDb21tdW5pY2F0
aW9uOsKgQSBuZXcgd2Vic2l0ZSB0aGF0IHNlcnZlcyBhcyBhIGNlbnRyYWwgcmVzb3Vy
Y2UgYWJvdXQgdGhlc2UgYW5kIG90aGVyIGluaXRpYXRpdmVzIGFib3V0IHJhY2UsIGVx
dWl0eSBhbmQgaW5jbHVzaW9uIGlzIHNldCB0byBsYXVuY2ggdGhpcyBzdW1tZXIuIFVu
dGlsIHRoZSBzaXRlIGlzIGxhdW5jaGVkLCB5b3UgY2FuIHZpc2l0wqB1bmMuZWR1Lg0K
QXMgeW91IGNhbiBzZWUgZnJvbSB0aGUgbGVuZ3RoIG9mIHRoaXMgdXBkYXRlLCB3ZSBo
YXZlIG1hbnkgaW1wb3J0YW50IGluaXRpYXRpdmVzIHVuZGVyd2F5LiBXZSBhbHNvIGNv
bnRpbnVlIHRvIGZvbGxvdyB0aGUgbGF0ZXN0IGRldmVsb3BtZW50cyBvbiBIb3VzZSBC
aWxsIDIsIGJvdGggaW4gUmFsZWlnaCBhbmQgaW4gZmVkZXJhbCBjb3VydC4gQXMgd2Ug
Y29tbXVuaWNhdGVkIHR3byB3ZWVrcyBhZ28sIHdlIGFjY2VsZXJhdGVkIHRoZSBpbnZl
bnRvcnkgb2YgZ2VuZGVyLW5ldXRyYWwgc2luZ2xlIHVzZSByZXN0cm9vbXMgYW5kIGhh
dmUgaWRlbnRpZmllZCBhZGRpdGlvbmFsIGdlbmRlci1uZXV0cmFsIHNpbmdsZSB1c2Ug
cmVzdHJvb21zIG9uIGNhbXB1cyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGxpc3Qg
b24gdGhlIHVuaXZlcnNpdHkgd2Vic2l0ZSB3aXRoaW4gdGhlIHdlZWsuwqBPdmVyIHRo
ZSBzdW1tZXIsIHdlIHdpbGwgbW92ZSBmb3J3YXJkIHRvIGluc3RhbGwgZ2VuZGVyLW5l
dXRyYWwgc2lnbnMgYXQgYWRkaXRpb25hbCBleGlzdGluZyBmYWNpbGl0aWVzIGFuZCBj
b252ZXJ0IGEgbnVtYmVyIG9mIHNpbmdsZSB1c2UgZ2VuZGVyLWJhc2VkIHJlc3Ryb29t
cyB0byBnZW5kZXItbmV1dHJhbCBzaW5nbGUgdXNlIHJlc3Ryb29tcy4gRmluYWxseSwg
ZmFjaWxpdGllcyBpcyBkZXZlbG9waW5nIGEgcGxhbiBhbmQgdGltZWxpbmUgdG8gcmVu
b3ZhdGUgY2VydGFpbiBidWlsZGluZ3MgdGhhdCBkbyBub3QgaGF2ZSBnZW5kZXItbmV1
dHJhbCBzaW5nbGUgdXNlIHJlc3Ryb29tcy4NCg0KV2UgYXJlIGdyYXRlZnVsIHRvIHRo
ZSBtYW55IHBlb3BsZSwgZnJvbSBzdHVkZW50cyB0byBhZG1pbmlzdHJhdG9ycywgd2hv
IHNob3dlZCBncmVhdCBjb3VyYWdlIGluIGV4cHJlc3NpbmcgdGhlaXIgY29uY2VybnMg
YW5kIGhvcGVzIGFuZCB3aG8gYXJlIGNvbnRpbnVpbmcgdG8gd29yayB0byBtYWtlIG91
ciBjYW1wdXMgZGl2ZXJzZSwgaW5jbHVzaXZlIGFuZCB3ZWxjb21pbmcgdG8gZXZlcnlv
bmUuDQoNCkhhdmUgYSBncmVhdCBzdW1tZXIsIGFuZCB3ZSBsb29rIGZvcndhcmQgdG8g
c2VlaW5nIHlvdSBpbiB0aGUgZmFsbC4NCg0KU2luY2VyZWx5LA0KDQpDYXJvbCBMLiBG
b2x0DQpDaGFuY2VsbG9yDQoNCkphbWVzIFcuIERlYW4sIEpyLg0KRXhlY3V0aXZlIFZp
Y2UgQ2hhbmNlbGxvciBhbmQgUHJvdm9zdMKgDQoNCldpbnN0b24gQ3Jpc3ANClZpY2Ug
Q2hhbmNlbGxvciBmb3IgU3R1ZGVudCBBZmZhaXJzDQoNCkZlbGljaWEgQS4gV2FzaGlu
Z3Rvbg0KVmljZSBDaGFuY2VsbG9yIGZvciBXb3JrZm9yY2UgU3RyYXRlZ3ksIEVxdWl0
eSBhbmQgRW5nYWdlbWVudA0KDQpKb2VsIEN1cnJhbg0KVmljZSBDaGFuY2VsbG9yIGZv
ciBDb21tdW5pY2F0aW9ucyBhbmQgUHVibGljIEFmZmFpcnMNCg0KVGFmZnllIENsYXl0
b24NCkFzc29jaWF0ZSBWaWNlIENoYW5jZWxsb3IgZm9yIERpdmVyc2l0eSBhbmQgTXVs
dGljdWx0dXJhbCBBZmZhaXJzIGFuZCBDaGllZiBEaXZlcnNpdHkgT2ZmaWNlcg0KDQpS
dW1heSBBbGV4YW5kZXINClNwZWNpYWwgQXNzaXN0YW50IHRvIHRoZSBDaGFuY2VsbG9y
DQoNClN0ZXBoZW4gRmFybWVyDQpWaWNlIFByb3Zvc3QgZm9yIEVucm9sbG1lbnQgYW5k
IFVuZGVyZ3JhZHVhdGUgQWRtaXNzaW9ucw0KDQrCoA0KDQrCoA0KDQpUaGlzIG1lc3Nh
Z2UgaXMgc3BvbnNvcmVkIGJ5OiBPZmZpY2Ugb2YgdGhlIENoYW5jZWxsb3I=