DQpPY3RvYmVyIDEyLCAyMDE2DQoNCkRlYXIgQ2Fyb2xpbmEgY29tbXVuaXR5LA0KDQpB
cyB5b3Uga25vdywgZWFzdGVybiBOb3J0aCBDYXJvbGluYSBpcyBmYWNpbmcgZXh0ZW5z
aXZlIGZsb29kaW5nIGFuZCBkZXZhc3RhdGlvbiBmcm9tIEh1cnJpY2FuZSBNYXR0aGV3
IHRoYXQgaGFzIG5vdCBiZWVuIHNlZW4gc2luY2UgSHVycmljYW5lIEZsb3lkIGNhdXNl
ZCB1bnByZWNlZGVudGVkIGFuZCBsYXN0aW5nIGRhbWFnZSBpbiAxOTk5LiBBcyB3ZSB3
ZXJlIHRoZW4sIENhcm9saW5hIGlzIHJlYWR5IHRvIHByb3ZpZGUgc3VwcG9ydCBhbmQg
cmVsaWVmIGFzIGNvbW11bml0aWVzIGRlYWwgd2l0aCBNYXR0aGV34oCZcyBhZnRlcm1h
dGguDQoNCk1vc3QgaW1wb3J0YW50bHksIHdlIGtub3cgbWFueSBvZiBvdXIgc3R1ZGVu
dHMsIHN0YWZmLCBmYWN1bHR5IGFuZCB0aGVpciBmYW1pbGllcyBhbmQgbG92ZWQgb25l
cyBhcmUgZGlyZWN0bHkgYWZmZWN0ZWQuIFdlIGhvcGUgeW91IHdpbGwgcmVhY2ggb3V0
IGFuZCBsZXQgdXMga25vdyBob3cgd2UgY2FuIGhlbHAuIFN0dWRlbnRzIG1heSBjb250
YWN0IHRoZSBPZmZpY2Ugb2YgdGhlIERlYW4gb2YgU3R1ZGVudHPCoGF0IDkxOS05NjYt
NDA0MiwgYXMgd2VsbCBhcyBDb3Vuc2VsaW5nIGFuZCBXZWxsbmVzcyBTZXJ2aWNlcywg
cGFydCBvZsKgQ2FtcHVzIEhlYWx0aCBTZXJ2aWNlcywgYXQgOTE5LTk2Ni0zNjU4LiBG
YWN1bHR5IG9yIHN0YWZmIG1heSBjYWxsIHRoZSBFbXBsb3llZSBBc3Npc3RhbmNlIFBy
b2dyYW0gYXQgOTE5LTkyOS0yMzYyLCBkdXJpbmcgYnVzaW5lc3MgaG91cnMgb3IgODc3
LTMyNy03NjU4IDI0IGhvdXJzIGEgZGF5Lg0KDQpXZSBhcmUgaGVhcmluZyBmcm9tIHBl
b3BsZSBhY3Jvc3MgY2FtcHVzIHdhbnRpbmcgdG8ga25vdyBob3cgdGhleSBjYW4gaGVs
cC4gQ2Fyb2xpbmEgb2ZmaWNlcyBhbmQgb3JnYW5pemF0aW9ucyBhcmUgd29ya2luZyB0
byBtYWtlIGluZm9ybWF0aW9uIGF2YWlsYWJsZS4gVG8gZmFjaWxpdGF0ZSBjb21tdW5p
Y2F0aW9uIGFib3V0IGVmZm9ydHMgYW5kIHJlc291cmNlcywgQ2hhbmNlbGxvciBGb2x0
IGhhcyBhc2tlZCB0aGUgQ2Fyb2xpbmEgQ2VudGVyIGZvciBQdWJsaWMgU2VydmljZSB0
byBoZWxwIGNvb3JkaW5hdGUgdGhlc2UgZWZmb3J0cy4gVGhlIGJlc3Qgc291cmNlIG9m
IHVwZGF0ZWQgaW5mb3JtYXRpb24gd2lsbCBiZSBwb3N0ZWQgb24gYSBkZWRpY2F0ZWQg
d2Vic2l0ZSBhdCBjY3BzLnVuYy5lZHUvSHVycmljYW5lTWF0dGhldy4gVGhlIGNlbnRl
ciB3aWxsIGNvbnRpbnVlIHRvIGNvbGxlY3QgYW5kIHNoYXJlIGluZm9ybWF0aW9uIGFi
b3V0IHJlbGllZiBlZmZvcnRzLiBZb3UgY2FuIHNlbmQgaW5mb3JtYXRpb24gYnkgZW1h
aWxpbmfCoGNjcHNAdW5jLmVkdS4NCg0KVGhlcmUgd2lsbCBiZSBhIGNhbXB1cyBtZWV0
aW5nIHRvbW9ycm93IChPY3QuIDEzLCAyMDE2KSBmb3IgY2FtcHVzIG9yZ2FuaXphdGlv
bnMgYW5kIHVuaXRzIHRvIGRpc2N1c3MgZGV2ZWxvcGluZyBhbiBlZmZlY3RpdmUgYW5k
IGNvb3JkaW5hdGVkIHJlc3BvbnNlLiBUaGlzIG1lZXRpbmcgd2lsbCBiZSBoZWxkIGF0
IDM6MzAgcC5tLiBpbiB0aGUgUGxlYXNhbnRzIEZhbWlseSBSb29tIGF0IFdpbHNvbiBM
aWJyYXJ5LiBUaGUgR2lsbGluZ3MgU2Nob29sIG9mIEdsb2JhbCBQdWJsaWMgSGVhbHRo
IGlzIHVuaXF1ZWx5IHF1YWxpZmllZCBhbmQgcmVhZHkgdG8gaGVscCBsZWFkIG91ciBl
ZmZvcnRzLCBhbmQgdGhlIEFtZXJpY2FuIEluZGlhbiBDZW50ZXIgaXMgYWxyZWFkeSBj
b2xsZWN0aW5nIG5lZWRlZCBzdXBwbGllcyBmb3IgY29tbXVuaXRpZXMgaW4gUm9iZXNv
biBDb3VudHkuIFN0dWRlbnQgb3JnYW5pemF0aW9ucyBpbmNsdWRpbmcgdGhlIENhbXB1
cyBZIHdpbGwgYWxzbyBiZSBpbnRlZ3JhbCB0byBvdXIgY2FtcHVzIHJlc3BvbnNlLiBB
bGwgb2YgdGhlc2UgcGFydG5lcnMgd2lsbCBiZSByZXByZXNlbnRlZCBhdCB0aGUgbWVl
dGluZyB0byBzaGFyZSB0aGVpciByZXNvdXJjZXMgYW5kIGluZm9ybWF0aW9uLg0KDQpT
ZXJ2aW5nIG90aGVycyBpcyBwYXJ0IG9mIHdobyB3ZSBhcmUsIGFuZCB0aGVyZSB3aWxs
IGJlIG1hbnkgd2F5cyB5b3UgY2FuIGNvbnRyaWJ1dGUgdG8gdGhlIGVmZm9ydC7CoCBX
ZSB3aWxsIGNvbWUgdG9nZXRoZXIgd2l0aCB0aG9zZSBhZmZlY3RlZCB0byBzdXBwb3J0
IHRoZW0gaW4gZ2V0dGluZyB0aHJvdWdoIHRoZSBpbW1lZGlhdGUgYW5kIGxvbmcgdGVy
bSBhZnRlcm1hdGggb2YgdGhlIGZsb29kaW5nLiBXZSB3aWxsIGFsc28ga2VlcCB5b3Ug
aW5mb3JtZWQgb2YgaG93IHlvdSBjYW4gaGVscCwgc28gcGxlYXNlIGNoZWNrIGJhY2sg
ZnJlcXVlbnRseSB0byB0aGUgY2Nwcy51bmMuZWR1L0h1cnJpY2FuZU1hdHRoZXcgd2Vi
c2l0ZS4NCg0KSW4gc2VydmljZSwNCg0KTHlubiBXaGl0ZSBCbGFuY2hhcmQNCg0KRGly
ZWN0b3IsIENhcm9saW5hIENlbnRlciBmb3IgUHVibGljIFNlcnZpY2UNCg0KVGhpcyBt
ZXNzYWdlIGlzIHNwb25zb3JlZCBieTogQ2Fyb2xpbmEgQ2VudGVyIGZvciBQdWJsaWMg
U2VydmljZQ==