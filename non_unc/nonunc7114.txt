Hey Mangza,

Here's what I sent another friend for what I studied on the Engineering
side for my interview at Snapchat:

So the concepts I would make sure I knew: 1. A* (this is a generic version
of Dijkstra's algorithm, so might be easier starting with Dijkstra's, but
they're very very similar) 2. Sorting algorithm run times and space
complexities specifically for merge, insertion, quick, radix, heap, and
bubble sort 3. I'd also make sure I knew the implementation of each 4.
linked lists, what they are, how to sort them in place (merge sort is best
for that) 5. Difference between an abstract class and an interface 6.
Breadth first search and depth first search (there's 2 implementations of
DFS one with a stack (whereas BFS uses a queue) and one recursive one, I'd
make sure to know both) 7. Greedy algorithms 8. Dynamic Programming and
memoization 9. Tree Traversal (pre-order, post-order, in-order) 10.
Possibly Tarjan's strongly connected components algorithm (I've had this
come up once at another company if I remember correctly). If you're
crunched for time, punt on this one, it's a bit unfair for an interviewer
to ask it in my opinion. 11. Binary trees, binary search trees. I doubt
you'll have to know red-black trees, but it wouldn't hurt. 12. What makes a
good hash map 13. Bit shifting and 2s complement. Also worth noting you can
very quickly determine if a number is a power of 2, by taking the number,
subtracting one, anding it with the original number, and seeing if the
result is 0 (in which case it is a power of 2). 14. Your anding, oring,
xoring operations 15. Binary search 16. Prefix tree / Trie 17.
Understanding why strings are immutable in both Java and JavaScript (or
whichever language you're using - they're most likely immutable), so
understanding why that is (partly thread safety) and the subtleties around
that. Also realize there's performance hits by "changing" a string over and
over in a loop because strings are immutable 18. In general what objects
are / OOP concepts (you probably know this stuff though)
That's all I can think of off the top of my head I'll let you know if
there's other things. Hopefully it doesn't seem like a ton of stuff. Most
of these (minus the algorithms) can probably be knocked out in a few hours.
I found it helpful to try to learn these concepts and then do some of the
problems on leet code just to test my understanding. For the sorting
algorithms I made sure I could I write them down on a piece of paper to be
sure I knew them. I'm happy to help though if you get stuck on any of these
or need help understanding. I reached out to some friends to help me
understand the strongly connected components stuff. And probably obvious,
but understanding why the algorithms work is probably more important that
just what the algorithms are, so building up intuition I found helpful.


The problems I solved on https://leetcode.com, a website that is good for
technical interview prep, (though by no means do you need to do these ones)
are: 1, 2, 3, 7, 8, 9, 11, 12, 20, 22, 24, 25, 29, 32, 43, 46, 54, 62, 63,
66, 67, 78, 81, 83, 104, 125, 139, 140, 144, 146, 147, 155, 190, 191, 226,
231, 232, 235, 242, 257, 258, 263, 264, 268, 273, 287, 316, 318, 322, 335,
338, 344, 345, 347.



If you have any questions feel free to reach out. Hope it helps!


Winston

On Wed, Nov 1, 2017 at 2:07 PM, Lal, Mangza  wrote:

> Hey Winston, my name is Mangza and one of Ms. Sturton's students. During
> your presentation, you said you had a document of things to know or
> something that you'd be willing to share. Could I have a copy of that
> please?
>
> Thanks.
>
