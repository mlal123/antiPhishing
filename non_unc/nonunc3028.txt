Instructor Maxwell Daum posted a new Note. Your instructor selected to notify everyone in real time of this post, bypassing user email preferences.

A3 TestCases used in grader








Note:
A. Correctness Test, namely Test, is to make sure that you have correctly create the heap by checking:
1. Get size using your size() function(So you should firstly write correct size() function)
2. Each required elements is in the heap
3. It satisfy the heap property(parent < child)

B. Please DO NOT SORT the sequence except building the heap or you will get 0 points

C. Highly recommend printing out the array and check the correctness of sequence.



Used  to describe an entrypair
A. Build Test
1. (reverse-order)
collection = {<"0", 10>, <"1", 7>,<"a", 5>, <"b", 4>, <"c", 3>, <"d", 2>, <"e", 1>,<"f",0>}
build(collection)
Test valid heap property and size==8


2. (in-order)
collection = {<"d",0>,<"b", 1>, <"c", 2>, <"a", 3>,<"g",107>}
build(collection)
Test valid heap property and size==5

3. (Random)
collection = {<"b", 7>, <"c", 8>, <"t", 5>, <"e", 4>, <"a", 2>, <"z", 1>, <"x",3>
build(collection)
Test valid heap property and size==7

B. Insert Test:
1. (reverse-order)
insert(<"0", 10>)
insert(<"1", 7>)
insert(<"a", 5>) 
insert(<"b", 4>)
insert(<"c", 3>)
insert(<"d", 2>)
insert(<"e", 1>)
insert(<"f",0>)
Test()

Sequence: Priority Only
0 1 2 4 5 7 3 10

2. (in-order)
insert(<"0", 0>)
insert(<"b", 1>)
insert(<"c", 2>)
insert(<"a", 3>)
insert(<"z", 8>)
Test()

Sequence: Priority Only
0 1 2 3 8

3. (Random)
insert(<"a", 1>)
insert(<"b", 5>)
insert(<"c", 8>)
insert(<"d", 7>)
insert(<"e", 4>)
insert(<"f", 2>)

Sequence: Priority Only:
1 4 2 7 5 8


C. DelMin Test:
1.
insert(<"a", 5>) 
insert(<"b", 4>)
insert(<"c", 3>)
insert(<"d", 2>)
insert(<"e", 1>)
insert(<"f", 0>)
delMin()
delMin()
Test()

test size==4 and correct heap property

2. 
insert(<"a", 1>)
insert(<"b", 2>)
insert(<"c", 3>)
insert(<"d", 4>)
delMin()
delMin()
delMin()
Test()
Sequence After Insertion:
4

3. Insert after deletion 1
insert(<"a", 1>)
delMin()
insert(<"a", 1>)
Test()

Sequence:
1

4. Insert After deletion 2
insert(<"a", 4>)
insert(<"b", 1>)
insert(<"c", 2>)
delMin()
insert(<"d", 0>)
insert(<"e", 3>)
insert(<"f", 7>)
delMin()
insert(<"g", 0>)
Test heap property and size==5

D. Size Test:

1. Insert:
insert("A", 1)
insert("B", 2)
insert("C", 3)
size() == 3

2. Delete After Insert:
insert(<"a", 5>) 
insert(<"b", 4>)
insert(<"c", 3>)
insert(<"d", 2>)
delMin()
size() == 3

3. Delete All:
insert(<"a", 1>)
insert(<"b", 2>)
insert(<"c", 3>)
delMin()
delMin()
delMin()
size() == 0

4. GetMin doesn't Change Size:
insert(<"a", 3>)
getMin()
insert(<"b", 2>)
getMin()
insert(<"c", 1>)
getMin()
size() == 3

E. GetMin Test:
1. Build & GetMin()
Collection = {<"a", 4>, <"b", 5>, <"c", 1>, <"d", 3>, <"e", 2>, <"f", 0>, <"g", 9>, <"h", 20>}
getMin() == <"f", 0>

2. Insertion & GetMin()
Insert(<"a", 7>)
Insert(<"d", 100>)
Insert(<"e", 5>)
getMin() == <"h", 0>

3. Delete & GetMin()
collection = {<"b", 1>, <"c", 4>, <"t", 2>, <"e", 8>, <"a", 5>, <"z", 7>
build(collection)
delMin()
delMin()
delMin()
delMin()
delMin()
getMin() == <"e", 8>


F. All in One:
Colletion = {<"a", 8>, <"b", 3>, <"z", 100>}
Build{Collection}
insert(<"c", 1>)
insert(<"d", 6>)
insert(<"e", 5>)
insert(<"f", 4>)
insert(<"g", 7>)
insert(<"h", 2>)
insert(<"i", 9>)
insert(<"j", 0>)
Test Heap sequence== 0 1 4 3 2 100 5 8 7 9 6
delMin()
size() == 10
getMin() == 1
insert(<"p", 0>)
insert(<"q", 10>)
getMin() == 0
Test Heap property
size() == 12













Go to https://piazza.com/class?cid=iu6ez7xlkff1la&nid=is6wk5m47ay4zy&token=f2GxNxqCfOm to view. Search or link to this question with @230.  

Sign up for more classes at http://piazza.com/unc


Want Piazza in all your classes?  Tell your professors and TAs today.  It's free!

Thanks,
The Piazza Team
--
Contact us at team@piazza.com


You're receiving this email because mlal123@live.unc.edu is enrolled in COMP 410 (section 002) at University of North Carolina at Chapel Hill. Go to https://piazza.com/login to sign in and manage your email preferences or proceed to https://piazza.com/remove/f2GxNxqCfOm/is6wk5m47ay4zy to un-enroll from this class.